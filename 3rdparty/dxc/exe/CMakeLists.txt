list(APPEND DXC_CMAKE_ARGS "-DHLSL_OPTIONAL_PROJS_IN_DEFAULT:BOOL=${HLSL_OPTIONAL_PROJS_IN_DEFAULT}")
list(APPEND DXC_CMAKE_ARGS "-DHLSL_ENABLE_ANALYZE:BOOL=${HLSL_ENABLE_ANALYZE}")
list(APPEND DXC_CMAKE_ARGS "-DHLSL_OFFICIAL_BUILD:BOOL=${HLSL_OFFICIAL_BUILD}")
list(APPEND DXC_CMAKE_ARGS "-DHLSL_ENABLE_FIXED_VER:BOOL=${HLSL_ENABLE_FIXED_VER}")
list(APPEND DXC_CMAKE_ARGS "-DHLSL_ENABLE_FIXED_VER:BOOL=${HLSL_ENABLE_FIXED_VER}")
list(APPEND DXC_CMAKE_ARGS "-DHLSL_FIXED_VERSION_LOCATION:STRING=")
list(APPEND DXC_CMAKE_ARGS "-DHLSL_BUILD_DXILCONV:BOOL=${HLSL_BUILD_DXILCONV}")
list(APPEND DXC_CMAKE_ARGS "-DCLANG_VENDOR:STRING=")
list(APPEND DXC_CMAKE_ARGS "-DENABLE_SPIRV_CODEGEN:BOOL=${ENABLE_SPIRV_CODEGEN}")
list(APPEND DXC_CMAKE_ARGS "-DSPIRV_BUILD_TESTS:BOOL=${SPIRV_BUILD_TESTS}")
list(APPEND DXC_CMAKE_ARGS "-DCLANG_ENABLE_ARCMT:BOOL=${CLANG_ENABLE_ARCMT}")
list(APPEND DXC_CMAKE_ARGS "-DCLANG_ENABLE_STATIC_ANALYZER:BOOL=${CLANG_ENABLE_STATIC_ANALYZER}")
list(APPEND DXC_CMAKE_ARGS "-DCLANG_INCLUDE_TESTS:BOOL=${CLANG_INCLUDE_TESTS}")
list(APPEND DXC_CMAKE_ARGS "-DLLVM_INCLUDE_TESTS:BOOL=${LLVM_INCLUDE_TESTS}")
list(APPEND DXC_CMAKE_ARGS "-DHLSL_INCLUDE_TESTS:BOOL=${HLSL_INCLUDE_TESTS}")
list(APPEND DXC_CMAKE_ARGS "-DLLVM_TARGETS_TO_BUILD:STRING=${LLVM_TARGETS_TO_BUILD}")
list(APPEND DXC_CMAKE_ARGS "-DLLVM_INCLUDE_DOCS:BOOL=${LLVM_INCLUDE_DOCS}")
list(APPEND DXC_CMAKE_ARGS "-DLLVM_INCLUDE_TESTS:BOOL=${LLVM_INCLUDE_TESTS}")
list(APPEND DXC_CMAKE_ARGS "-DLLVM_INCLUDE_EXAMPLES:BOOL=${LLVM_INCLUDE_EXAMPLES}")
list(APPEND DXC_CMAKE_ARGS "-DLIBCLANG_BUILD_STATIC:BOOL=${LIBCLANG_BUILD_STATIC}")
list(APPEND DXC_CMAKE_ARGS "-DLLVM_OPTIMIZED_TABLEGEN:BOOL=${LLVM_OPTIMIZED_TABLEGEN}")
list(APPEND DXC_CMAKE_ARGS "-DLLVM_REQUIRES_EH:BOOL=${LLVM_REQUIRES_EH}")
list(APPEND DXC_CMAKE_ARGS "-DLLVM_APPEND_VC_REV:BOOL=${LLVM_APPEND_VC_REV}")
list(APPEND DXC_CMAKE_ARGS "-DLLVM_ENABLE_RTTI:BOOL=${LLVM_ENABLE_RTTI}")
list(APPEND DXC_CMAKE_ARGS "-DLLVM_ENABLE_EH:BOOL=${LLVM_ENABLE_EH}")
list(APPEND DXC_CMAKE_ARGS "-DLLVM_DEFAULT_TARGET_TRIPLE:STRING=${LLVM_DEFAULT_TARGET_TRIPLE}")
list(APPEND DXC_CMAKE_ARGS "-DCLANG_BUILD_EXAMPLES:BOOL=${CLANG_BUILD_EXAMPLES}")
list(APPEND DXC_CMAKE_ARGS "-DLLVM_REQUIRES_RTTI:BOOL=${LLVM_REQUIRES_RTTI}")
list(APPEND DXC_CMAKE_ARGS "-DCLANG_CL:BOOL=${CLANG_CL}")
list(APPEND DXC_CMAKE_ARGS "-DCMAKE_SYSTEM_VERSION=${CMAKE_SYSTEM_VERSION}")
list(APPEND DXC_CMAKE_ARGS "-DDXC_BUILD_ARCH=${DXC_BUILD_ARCH}")

get_filename_component(_DXC_EXT_SOURCE_DIR_ "${CMAKE_CURRENT_SOURCE_DIR}/../dxc" ABSOLUTE)
get_filename_component(_DXC_EXT_BINARY_DIR_ "${CMAKE_CURRENT_SOURCE_DIR}/../exe/build" ABSOLUTE)
set(DXC_EXT_EXECUTABLE "${_DXC_EXT_BINARY_DIR_}/Release/bin/dxc.exe" CACHE INTERNAL "")

ExternalProject_Add(build_dxc_exe
	DOWNLOAD_COMMAND  ""
	SOURCE_DIR        "${_DXC_EXT_SOURCE_DIR_}"
	BINARY_DIR        "${_DXC_EXT_BINARY_DIR_}"
	BUILD_COMMAND     "${CMAKE_COMMAND}" --build "${_DXC_EXT_BINARY_DIR_}" --config Release --target dxc -v # we always compile DXC executable with Release configuration
	CONFIGURE_COMMAND "${CMAKE_COMMAND}" -S "${_DXC_EXT_SOURCE_DIR_}" -B "${_DXC_EXT_BINARY_DIR_}" -G "${CMAKE_GENERATOR}" "-Ax64" -T "${CMAKE_GENERATOR_TOOLSET}" ${DXC_CMAKE_ARGS}
	INSTALL_COMMAND	  ""
	TEST_COMMAND      ""
	LOG_INSTALL		  1
)

unset(DXC_CMAKE_ARGS)