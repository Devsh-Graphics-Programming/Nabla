list(APPEND NBL_DXC_CMAKE_OPTIONS "-DHLSL_OPTIONAL_PROJS_IN_DEFAULT:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DHLSL_ENABLE_ANALYZE:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DHLSL_OFFICIAL_BUILD:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DHLSL_ENABLE_FIXED_VER:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DHLSL_FIXED_VERSION_LOCATION:STRING=")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DHLSL_BUILD_DXILCONV:BOOL=ON")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DCLANG_VENDOR:STRING=")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DENABLE_SPIRV_CODEGEN:BOOL=ON")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DSPIRV_BUILD_TESTS:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DCLANG_ENABLE_ARCMT:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DCLANG_ENABLE_STATIC_ANALYZER:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DCLANG_INCLUDE_TESTS:BOOL=Off")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DLLVM_INCLUDE_TESTS:BOOL=Off")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DHLSL_INCLUDE_TESTS:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DLLVM_TARGETS_TO_BUILD:STRING=None")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DLLVM_INCLUDE_DOCS:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DLLVM_INCLUDE_TESTS:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DLLVM_INCLUDE_EXAMPLES:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DLIBCLANG_BUILD_STATIC:BOOL=ON")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DLLVM_OPTIMIZED_TABLEGEN:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DLLVM_REQUIRES_EH:BOOL=ON")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DLLVM_APPEND_VC_REV:BOOL=ON")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DLLVM_ENABLE_RTTI:BOOL=ON")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DLLVM_ENABLE_EH:BOOL=ON")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DLLVM_DEFAULT_TARGET_TRIPLE:STING=dxil-ms-dx")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DCLANG_BUILD_EXAMPLES:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DLLVM_REQUIRES_RTTI:BOOL=ON")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DCLANG_CL:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DLLVM_ENABLE_WERROR:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DSPIRV_WERROR:BOOL=OFF")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DDXC_BUILD_ARCH:STRING=x64")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DSPIRV_HEADERS_SKIP_INSTALL:BOOL=ON")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DSPIRV_HEADERS_SKIP_EXAMPLES:BOOL=ON")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DSKIP_SPIRV_TOOLS_INSTALL:BOOL=ON")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DSPIRV_SKIP_TESTS:BOOL=ON")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DSPIRV_SKIP_EXECUTABLES:BOOL=ON")
list(APPEND NBL_DXC_CMAKE_OPTIONS "-DHLSL_ENABLE_DEBUG_ITERATORS:BOOL=ON")

if(WIN32)
	if(NOT DEFINED HLSL_AUTOCRLF)
		list(APPEND NBL_DXC_CMAKE_OPTIONS "-DHLSL_AUTOCRLF:BOOL=ON")
	else()
		list(APPEND NBL_DXC_CMAKE_OPTIONS "-DHLSL_AUTOCRLF:BOOL=${HLSL_AUTOCRLF}")
	endif()
endif()

if(NBL_DYNAMIC_MSVC_RUNTIME)
	list(APPEND NBL_DXC_CMAKE_OPTIONS "-DCMAKE_MSVC_RUNTIME_LIBRARY:STATIC=MultiThreaded$<$<CONFIG:Debug>:Debug>DLL")
else()
	list(APPEND NBL_DXC_CMAKE_OPTIONS "-DCMAKE_MSVC_RUNTIME_LIBRARY:STATIC=MultiThreaded$<$<CONFIG:Debug>:Debug>")		
endif()

# perform DXC compile standard requirement test
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 11) # compiler must support exactly c++11 or c++14 standard in order to be able to build DXC libraries

try_compile(DXC_COMPILE_TEST_PASSED
	SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/test/test.cpp"
	OUTPUT_VARIABLE DXC_COMPILE_RET_VAL
	CXX_STANDARD ${CMAKE_CXX_STANDARD}
	CXX_STANDARD_REQUIRED ON
)

if(DXC_COMPILE_TEST_PASSED)
	set(DXC_COMPILE_TEST_DONE ON CACHE BOOL "")
else()
	message(FATAL_ERROR "${DXC_COMPILE_RET_VAL}")
endif()

set(DXC_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/build" CACHE INTERNAL "")

if(WIN32)
	execute_process(COMMAND "${CMAKE_COMMAND}" -C "${CMAKE_CURRENT_SOURCE_DIR}/dxc/cmake/caches/PredefinedParams.cmake" -S "${CMAKE_CURRENT_SOURCE_DIR}/dxc" -B "${DXC_BUILD_DIR}" -G "${CMAKE_GENERATOR}" "-Ax64" -T "${CMAKE_GENERATOR_TOOLSET}" ${NBL_DXC_CMAKE_OPTIONS}
		RESULT_VARIABLE DXC_CMAKE_RESULT
		OUTPUT_VARIABLE DXC_CMAKE_STREAM_PIPE
	)
else()
	execute_process(COMMAND "${CMAKE_COMMAND}" 
		-S "${CMAKE_CURRENT_SOURCE_DIR}/dxc"
		-C "${CMAKE_CURRENT_SOURCE_DIR}/dxc/cmake/caches/PredefinedParams.cmake"
		-G "${CMAKE_GENERATOR}" 
		-T "${CMAKE_GENERATOR_TOOLSET}"
		-B "${DXC_BUILD_DIR}" 
		-D "CMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}"
		RESULT_VARIABLE DXC_CMAKE_RESULT
		OUTPUT_VARIABLE DXC_CMAKE_STREAM_PIPE
	)
endif()

if(NOT "${DXC_CMAKE_RESULT}" STREQUAL "0")
	message(FATAL_ERROR "${DXC_CMAKE_STREAM_PIPE}")
endif()

set(CMAKE_CXX_STANDARD 20) # it's mandatory
unset(CMAKE_CXX_STANDARD_REQUIRED)

include(FetchContent)
set(FC_EXTERNAL_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/external")

set(DXC_BINARY_DIR "${FC_EXTERNAL_BINARY_DIR}/dxc" CACHE INTERNAL "")
set(DXC_DOWNLOAD_DIR "${DXC_BINARY_DIR}/download" CACHE INTERNAL "")
set(DXC_UNPACK_DIR "${DXC_BINARY_DIR}/unpack" CACHE INTERNAL "")

FetchContent_Declare(
	FC_DXC
	URL 			  "${CMAKE_CURRENT_SOURCE_DIR}/exe/bin.tar.bz2"
	DOWNLOAD_DIR      "${DXC_DOWNLOAD_DIR}"
	SOURCE_DIR		  "${DXC_UNPACK_DIR}"
	BINARY_DIR        "${DXC_BINARY_DIR}"
)

if(NOT DEFINED FC_DXC_POPULATED OR NOT ${FC_DXC_POPULATED})
	message(STATUS "Populating DXC executable...")
	
	FetchContent_MakeAvailable(FC_DXC)
	FetchContent_GetProperties(FC_DXC POPULATED _FC_DXC_POPULATED_)
	
	if(${_FC_DXC_POPULATED_})
		set(FC_DXC_POPULATED ON CACHE INTERNAL "")
	else()
		set(FC_DXC_POPULATED OFF CACHE INTERNAL "")
	endif()
	
	unset(_FC_DXC_POPULATED_)
endif()

set(DXC_EXT_EXECUTABLE "${DXC_UNPACK_DIR}/dxc.exe" CACHE STRING "" FORCE)

if(_NBL_ENABLE_DXC_COMPILE_TESTS_)
	add_subdirectory(CT CT)
endif()

include("${DXC_BUILD_DIR}/nbl/generate/dxc/config/debug.cmake")
include("${DXC_BUILD_DIR}/nbl/generate/dxc/config/release.cmake")

set(DXC_INCLUDE_DIRECTORIES
	$<IF:$<CONFIG:Debug>,${NBL_DXC_DEBUG_INCLUDE_DIRECTORIES},${NBL_DXC_RELEASE_INCLUDE_DIRECTORIES}>
CACHE INTERNAL "")

set(DXC_LIB
	$<IF:$<CONFIG:Debug>,${NBL_DXC_DEBUG_LIB},${NBL_DXC_RELEASE_LIB}>
CACHE INTERNAL "")

set(DXC_DLL 
	$<IF:$<CONFIG:Debug>,${NBL_DXC_DEBUG_DLL},${NBL_DXC_RELEASE_DLL}>
CACHE INTERNAL "")

cmake_path(GET NBL_DXC_DEBUG_DLL FILENAME _NBL_DXC_DEBUG_DLL_NAME_)
cmake_path(GET NBL_DXC_RELEASE_DLL FILENAME _NBL_DXC_RELEASE_DLL_NAME_)

set(DXC_DLL_NAME 
	$<IF:$<CONFIG:Debug>,${_NBL_DXC_DEBUG_DLL_NAME_},${_NBL_DXC_RELEASE_DLL_NAME_}>
CACHE INTERNAL "")
