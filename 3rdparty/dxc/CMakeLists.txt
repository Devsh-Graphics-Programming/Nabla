set(HLSL_OPTIONAL_PROJS_IN_DEFAULT OFF CACHE BOOL "")
set(HLSL_ENABLE_ANALYZE OFF CACHE BOOL "")
set(HLSL_OFFICIAL_BUILD OFF CACHE BOOL "")
set(HLSL_ENABLE_FIXED_VER OFF CACHE BOOL "")
set(HLSL_ENABLE_FIXED_VER OFF CACHE BOOL "")
set(HLSL_FIXED_VERSION_LOCATION "" CACHE STRING "")
set(HLSL_BUILD_DXILCONV ON CACHE BOOL "")
set(CLANG_VENDOR "" CACHE STRING "")
set(ENABLE_SPIRV_CODEGEN ON CACHE BOOL "")
set(SPIRV_BUILD_TESTS OFF CACHE BOOL "")
set(CLANG_ENABLE_ARCMT OFF CACHE BOOL "")
set(CLANG_ENABLE_STATIC_ANALYZER OFF CACHE BOOL "")
set(CLANG_INCLUDE_TESTS Off CACHE BOOL "")
set(LLVM_INCLUDE_TESTS Off CACHE BOOL "")
set(HLSL_INCLUDE_TESTS OFF CACHE BOOL "")
set(LLVM_TARGETS_TO_BUILD None CACHE STRING "")
set(LLVM_INCLUDE_DOCS OFF CACHE BOOL "")
set(LLVM_INCLUDE_TESTS OFF CACHE BOOL "")
set(LLVM_INCLUDE_EXAMPLES OFF CACHE BOOL "")
set(LIBCLANG_BUILD_STATIC ON CACHE BOOL "")
set(LLVM_OPTIMIZED_TABLEGEN OFF CACHE BOOL "")
set(LLVM_REQUIRES_EH ON CACHE BOOL "")
set(LLVM_APPEND_VC_REV ON CACHE BOOL "")
set(LLVM_ENABLE_RTTI ON CACHE BOOL "")
set(LLVM_ENABLE_EH ON CACHE BOOL "")
set(LLVM_DEFAULT_TARGET_TRIPLE "dxil-ms-dx" CACHE STRING "")
set(CLANG_BUILD_EXAMPLES OFF CACHE BOOL "")
set(LLVM_REQUIRES_RTTI ON CACHE BOOL "")
set(CLANG_CL OFF CACHE BOOL "")
set(LLVM_ENABLE_WERROR OFF CACHE BOOL "" FORCE)
set(SPIRV_WERROR OFF CACHE BOOL "" FORCE)
#set(CMAKE_SYSTEM_VERSION=10.0.17763.0")
set(DXC_BUILD_ARCH x64 CACHE STRING "")
set(SPIRV_HEADERS_SKIP_INSTALL ON CACHE INTERNAL "Skip SPIRV-Headers install")
set(SPIRV_HEADERS_SKIP_EXAMPLES ON CACHE INTERNAL "Skip SPIRV-Headers examples")
set(SKIP_SPIRV_TOOLS_INSTALL ON CACHE INTERNAL "Skip SPIRV-Tools install")
set(SPIRV_SKIP_TESTS ON CACHE INTERNAL "Skip SPIRV-Tools tests")
set(SPIRV_SKIP_EXECUTABLES ON CACHE INTERNAL "Skip SPIRV-Tools executable build")

add_subdirectory(dxc dxc)

set(_NBL_DXC_TARGETS_WITH_FORCED_LOW_STANDARD_
	dxcompiler
	LLVMSupport
	llvm-tblgen
	clangCodeGen
	LLVMDxilDia
	LLVMAnalysis
	LLVMTransformUtils
	LLVMScalarOpts
)

foreach(_NBL_DXC_TARGET_WITH_FORCED_LOW_STANDARD_ IN LISTS _NBL_DXC_TARGETS_WITH_FORCED_LOW_STANDARD_)
	set_property(TARGET ${_NBL_DXC_TARGET_WITH_FORCED_LOW_STANDARD_} PROPERTY CXX_STANDARD 11)
endforeach()


# TODO: change them
#set(_DXC_CURRENT_CONFIG_ "$<IF:$<CONFIG:Debug>,Debug,Release>")
#set(DXC_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/dxc" CACHE INTERNAL "")
#set(DXC_BINARY_DIR_EP "${CMAKE_CURRENT_BINARY_DIR}/external/dxc" CACHE INTERNAL "")
#set(DXC_BINARY_DIR_GE "${DXC_BINARY_DIR_EP}/build" CACHE INTERNAL "")
#set(DXC_BIN_DIR "${DXC_BINARY_DIR_GE}/Release/bin" CACHE INTERNAL "") # hardcoded
#set(DXC_LIB_DIR "${DXC_BINARY_DIR_GE}/${_DXC_CURRENT_CONFIG_}/lib" CACHE INTERNAL "") # library path depends on the configuration
#set(DXC_EXECUTABLE "${DXC_BIN_DIR}/dxc.exe" CACHE INTERNAL "")
#set(DXC_DXCOMPILER_LIB "${DXC_LIB_DIR}/dxcompiler.lib" CACHE INTERNAL "")

# DXC External Project
# builds DXC executable target and dxcompiler library target
# we cannot include it to Nabla's BS because DXC's BS isn't supposed to be added via submodule 
# - there are troubles with linker input paths and include/link search directory paths

#ExternalProject_Add(dxc
#	DOWNLOAD_COMMAND  ""
#	SOURCE_DIR        "${DXC_SOURCE_DIR}"
#	BINARY_DIR        "${DXC_BINARY_DIR_EP}"
#	BUILD_COMMAND     "${CMAKE_COMMAND}" --build "${DXC_BINARY_DIR_GE}" --config Release --target dxc -v # DXC executable will be compiled always in Release mode
#	COMMAND			  "${CMAKE_COMMAND}" --build "${DXC_BINARY_DIR_GE}" --config ${_DXC_CURRENT_CONFIG_} --target dxcompiler -v
#	CONFIGURE_COMMAND "${CMAKE_COMMAND}" -S "${DXC_SOURCE_DIR}" -B "${DXC_BINARY_DIR_GE}" -G "${CMAKE_GENERATOR}" "-Ax64" -T "${CMAKE_GENERATOR_TOOLSET}" ${DXC_CMAKE_ARGS}
#	INSTALL_COMMAND	  ""
#	TEST_COMMAND      ""
#	LOG_INSTALL		  1
#)

unset(DXC_CMAKE_ARGS)
unset(_DXC_CURRENT_CONFIG_)

#if(_NBL_ENABLE_DXC_COMPILE_TESTS_)
#	add_subdirectory(CT CT)
#endif()