set(HLSL_OPTIONAL_PROJS_IN_DEFAULT OFF CACHE BOOL "")
set(HLSL_ENABLE_ANALYZE OFF CACHE BOOL "")
set(HLSL_OFFICIAL_BUILD OFF CACHE BOOL "")
set(HLSL_ENABLE_FIXED_VER OFF CACHE BOOL "")
set(HLSL_ENABLE_FIXED_VER OFF CACHE BOOL "")
set(HLSL_FIXED_VERSION_LOCATION "" CACHE STRING "")
set(HLSL_BUILD_DXILCONV ON CACHE BOOL "")
set(CLANG_VENDOR "" CACHE STRING "")
set(ENABLE_SPIRV_CODEGEN ON CACHE BOOL "")
set(SPIRV_BUILD_TESTS OFF CACHE BOOL "")
set(CLANG_ENABLE_ARCMT OFF CACHE BOOL "")
set(CLANG_ENABLE_STATIC_ANALYZER OFF CACHE BOOL "")
set(CLANG_INCLUDE_TESTS Off CACHE BOOL "")
set(LLVM_INCLUDE_TESTS Off CACHE BOOL "")
set(HLSL_INCLUDE_TESTS OFF CACHE BOOL "")
set(LLVM_TARGETS_TO_BUILD None CACHE STRING "")
set(LLVM_INCLUDE_DOCS OFF CACHE BOOL "")
set(LLVM_INCLUDE_TESTS OFF CACHE BOOL "")
set(LLVM_INCLUDE_EXAMPLES OFF CACHE BOOL "")
set(LIBCLANG_BUILD_STATIC ON CACHE BOOL "")
set(LLVM_OPTIMIZED_TABLEGEN OFF CACHE BOOL "")
set(LLVM_REQUIRES_EH ON CACHE BOOL "")
set(LLVM_APPEND_VC_REV ON CACHE BOOL "")
set(LLVM_ENABLE_RTTI ON CACHE BOOL "")
set(LLVM_ENABLE_EH ON CACHE BOOL "")
set(LLVM_DEFAULT_TARGET_TRIPLE "dxil-ms-dx" CACHE STRING "")
set(CLANG_BUILD_EXAMPLES OFF CACHE BOOL "")
set(LLVM_REQUIRES_RTTI ON CACHE BOOL "")
set(CLANG_CL OFF CACHE BOOL "")
set(LLVM_ENABLE_WERROR OFF CACHE BOOL "" FORCE)
set(SPIRV_WERROR OFF CACHE BOOL "" FORCE)
set(DXC_BUILD_ARCH x64 CACHE STRING "")
set(SPIRV_HEADERS_SKIP_INSTALL ON CACHE INTERNAL "Skip SPIRV-Headers install")
set(SPIRV_HEADERS_SKIP_EXAMPLES ON CACHE INTERNAL "Skip SPIRV-Headers examples")
set(SKIP_SPIRV_TOOLS_INSTALL ON CACHE INTERNAL "Skip SPIRV-Tools install")
set(SPIRV_SKIP_TESTS ON CACHE INTERNAL "Skip SPIRV-Tools tests")
set(SPIRV_SKIP_EXECUTABLES ON CACHE INTERNAL "Skip SPIRV-Tools executable build")
set(HLSL_ENABLE_DEBUG_ITERATORS ON CACHE BOOL "Enable Debug iterators" FORCE)

set(CMAKE_CXX_STANDARD 11)
if(NBL_DYNAMIC_MSVC_RUNTIME)
	set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>DLL")
else()
	set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")		
endif()

add_subdirectory(dxc dxc) # for dxcompiler target
set(CMAKE_CXX_STANDARD 20) # it's mandatory

include(FetchContent)
set(FC_EXTERNAL_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/external")

set(DXC_BINARY_DIR "${FC_EXTERNAL_BINARY_DIR}/dxc" CACHE INTERNAL "")
set(DXC_DOWNLOAD_DIR "${DXC_BINARY_DIR}/download" CACHE INTERNAL "")
set(DXC_UNPACK_DIR "${DXC_BINARY_DIR}/unpack" CACHE INTERNAL "")

FetchContent_Declare(
	FC_DXC
	URL 			  "${CMAKE_CURRENT_SOURCE_DIR}/exe/bin.tar.bz2"
	DOWNLOAD_DIR      "${DXC_DOWNLOAD_DIR}"
	SOURCE_DIR		  "${DXC_UNPACK_DIR}"
	BINARY_DIR        "${DXC_BINARY_DIR}"
)

if(NOT DEFINED FC_DXC_POPULATED OR NOT ${FC_DXC_POPULATED})
	message(STATUS "Populating DXC executable...")
	
	FetchContent_MakeAvailable(FC_DXC)
	FetchContent_GetProperties(FC_DXC POPULATED _FC_DXC_POPULATED_)
	
	if(${_FC_DXC_POPULATED_})
		set(FC_DXC_POPULATED ON CACHE INTERNAL "")
	else()
		set(FC_DXC_POPULATED OFF CACHE INTERNAL "")
	endif()
	
	unset(_FC_DXC_POPULATED_)
endif()

set(DXC_EXT_EXECUTABLE "${DXC_UNPACK_DIR}/dxc.exe" CACHE STRING "" FORCE)

if(_NBL_ENABLE_DXC_COMPILE_TESTS_)
	add_subdirectory(CT CT)
endif()