#ifndef _@_GUARD_SUFFIX_@_C_ARCHIVE_H_
#define _@_GUARD_SUFFIX_@_C_ARCHIVE_H_

#include "nbl/system/CFileArchive.h"
#include "nbl/core/def/smart_refctd_ptr.h"
#include "@NBL_BS_HEADER_FILENAME@"

namespace @_NAMESPACE_@
{
constexpr std::string_view pathPrefix = "@_BUNDLE_ARCHIVE_ABSOLUTE_PATH_@";

inline bool hasPathPrefix(nbl::system::path _path)
{
	_path.make_preferred();
	const auto prefix = nbl::system::path(pathPrefix).make_preferred();
	return _path.string().find(prefix.string())==0ull;
}

class @NBL_BR_API@ CArchive final : public nbl::system::CFileArchive
{
	public:
		CArchive(nbl::system::logger_opt_smart_ptr&& logger);
			
	protected:
		file_buffer_t getFileBuffer(const nbl::system::IFileArchive::SFileList::found_t& found) override
		{
				auto resource = get_resource_runtime(found->pathRelativeToArchive.string());
				return {const_cast<uint8_t*>(resource.contents),resource.size,nullptr};
		}			
};
}

#endif // _@_GUARD_SUFFIX_@_C_ARCHIVE_H_


