#ifndef _@_GUARD_SUFFIX_@_C_ARCHIVE_H_
#define _@_GUARD_SUFFIX_@_C_ARCHIVE_H_

#include "nbl/system/CFileArchive.h"
#include "nbl/core/def/smart_refctd_ptr.h"
#include "@NBL_BS_HEADER_FILENAME@"

namespace @_NAMESPACE_@
{
	constexpr std::string_view pathPrefix = "@_BUNDLE_ARCHIVE_ABSOLUTE_PATH_@";
	constexpr bool hasPathPrefix(std::string_view str) { return str.find(pathPrefix) == 0ull; }

	class @NBL_BR_API@ CArchive final : public nbl::system::CFileArchive
	{
		public:
			CArchive(nbl::system::logger_opt_smart_ptr&& logger);
			
		protected:
			file_buffer_t getFileBuffer(const nbl::system::IFileArchive::SFileList::SEntry* item) override
			{
					auto found = get_resource_runtime(item->pathRelativeToArchive.string());
					return { const_cast<uint8_t*>(found.first), found.second, nullptr };
			}			
	};
}

#endif // _@_GUARD_SUFFIX_@_C_ARCHIVE_H_


