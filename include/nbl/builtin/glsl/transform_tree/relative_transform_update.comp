#version 440 core
layout(local_size_x=NBL_LIMIT_MAX_OPTIMALLY_RESIDENT_WORKGROUP_INVOCATIONS) in;

// disable descriptors we dont need
#define NBL_GLSL_TRANSFORM_TREE_POOL_NODE_PARENT_DESCRIPTOR_DECLARED
#define NBL_GLSL_TRANSFORM_TREE_POOL_NODE_GLOBAL_TRANSFORM_DESCRIPTOR_DECLARED
#define NBL_GLSL_TRANSFORM_TREE_POOL_NODE_RECOMPUTED_TIMESTAMP_DESCRIPTOR_DECLARED
#define NBL_GLSL_TRANSFORM_TREE_POOL_NODE_NORMAL_MATRIX_DESCRIPTOR_DECLARED
// constrain access type
#define NBL_GLSL_TRANSFORM_TREE_POOL_NODE_MODIFIED_TIMESTAMP_DESCRIPTOR_QUALIFIERS writeonly restrict
#include "nbl/builtin/glsl/transform_tree/relative_transform_update_common.glsl"

void main()
{
    const uint dispatchSize = NBL_LIMIT_MAX_OPTIMALLY_RESIDENT_WORKGROUP_INVOCATIONS*gl_NumWorkGroups[0];
    for (uint nodeID=gl_GlobalInvocationID.x; nodeID<relativeTransformModificationRequestRanges.rangeCount; nodeID+=dispatchSize)
    {
        const nbl_glsl_transform_tree_modification_request_range_t requestRange = relativeTransformModificationRequestRanges.data[nodeID];
        nbl_glsl_transform_tree_relativeTransformUpdate_noStamp(requestRange);
        nodeUpdatedTimestamp.data[requestRange.nodeID] = requestRange.newTimestamp;
    }
}