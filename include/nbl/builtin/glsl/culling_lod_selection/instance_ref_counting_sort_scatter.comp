// Copyright (C) 2018-2020 - DevSH Graphics Programming Sp. z O.O.
// This file is part of the "Nabla Engine".
// For conditions of distribution and use, see copyright notice in nabla.h

#version 440 core
layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_) in;


#define NBL_GLSL_CULLING_LOD_SELECTION_INSTANCE_LIST_DESCRIPTOR_DECLARED
#define NBL_GLSL_CULLING_LOD_SELECTION_INSTANCE_PVS_INSTANCES_DESCRIPTOR_QUALIFIERS restrict readonly
#define NBL_GLSL_CULLING_LOD_SELECTION_INSTANCE_DRAWCALL_INCLUSIVE_COUNTS_DESCRIPTOR_QUALIFIERS restrict writeonly
#define NBL_GLSL_CULLING_LOD_SELECTION_PVS_INSTANCE_DRAWS_DESCRIPTOR_QUALIFIERS restrict readonly
// dont pull the scan scratch descriptor (we'll use our own decl for clearing)
#define _NBL_GLSL_SCAN_DESCRIPTORS_INCLUDED_
#include <nbl/builtin/glsl/culling_lod_selection/input_descriptor_set.glsl>
layout(set=_NBL_GLSL_SCAN_DESCRIPTOR_SET_DEFINED_,binding=_NBL_GLSL_SCAN_SCRATCH_BINDING_DEFINED_) restrict writeonly buffer ScanScratchBuffer
{
    uint data[];
} scanScratch;

#define NBL_GLSL_CULLING_LOD_SELECTION_DRAW_CALLS_DESCRIPTOR_QUALIFIERS restrict readonly
#define NBL_GLSL_CULLING_LOD_SELECTION_PER_VIEW_PER_INSTANCE_DESCRIPTOR_DECLARED
#define NBL_GLSL_CULLING_LOD_SELECTION_DRAW_CALL_COUNTS_DESCRIPTOR_DECLARED
#include <nbl/builtin/glsl/culling_lod_selection/output_descriptor_set.glsl>


#include <nbl/builtin/glsl/scan/parameters_struct.glsl>
layout(push_constant) uniform PushConstants
{
	nbl_glsl_scan_Parameters_t scanParams;
} pc;

void main()
{
    if (gl_GlobalInvocationID.x==0u)
        totalInstanceCountAfterCull = 0u;
    else if (gl_GlobalInvocationID.x==1u)
        dispatchIndirect.instanceDrawCountPrefixSum.num_groups_x = 1u;

    const uint dispatchSize = gl_NumWorkGroups[0]*_NBL_GLSL_WORKGROUP_SIZE_;

    const uint lastScratchDWORDToClear = pc.scanParams.temporaryStorageOffset[0];
    for (uint dword=gl_GlobalInvocationID.x; dword<=lastScratchDWORDToClear; dword+=dispatchSize)
        scanScratch.data[dword] = 0u;

    const uint potentiallyVisibleInstanceCount = pvsInstanceDraws.count;
    for (uint unsortedDrawInstanceID=gl_GlobalInvocationID.x; unsortedDrawInstanceID<potentiallyVisibleInstanceCount; unsortedDrawInstanceID+=dispatchSize)
    {
        const uint perViewPerInstanceID = pvsInstanceDraws.data[unsortedDrawInstanceID].perViewPerInstanceID;
        const uint drawBaseInstanceDWORDOffset = pvsInstanceDraws.data[unsortedDrawInstanceID].drawBaseInstanceDWORDOffset;
        const uint instanceID = pvsInstanceDraws.data[unsortedDrawInstanceID].instanceID;

        const uint instanceIndex = nbl_glsl_culling_lod_selection_drawCallGetDWORD(drawBaseInstanceDWORDOffset)+instanceID;
        perInstanceRedirectAttrs.data[instanceIndex] = uvec2(pvsInstances.data[perViewPerInstanceID][0],perViewPerInstanceID);
    }
}