#version 440 core
layout(local_size_x=NBL_LIMIT_MAX_OPTIMALLY_RESIDENT_WORKGROUP_INVOCATIONS) in;

#include <nbl/builtin/glsl/skinning/cache_descriptor_set.glsl>
#include <nbl/builtin/glsl/skinning/update_descriptor_set.glsl>

#include <nbl/builtin/glsl/algorithm.glsl>
NBL_GLSL_DEFINE_UPPER_BOUND(jointCountInclPrefixSum,uint)

#include "nbl/builtin/glsl/utils/transform.glsl"
void main()
{
    const uint skinCount = skinsToUpdate.count;
    if (skinCount==0u)
        return;

    const uint totalJointCount = jointCountInclPrefixSum[skinCount-1u];
    const uint dispatchSize = NBL_LIMIT_MAX_OPTIMALLY_RESIDENT_WORKGROUP_INVOCATIONS*gl_NumWorkGroups[0];
    for (uint jointIndex=gl_GlobalInvocationID.x; jointIndex<totalJointCount; jointIndex+=dispatchSize)
    {
        // TODO: implement via https://moderngpu.github.io/sortedsearch.html, find the upper and lower bounds of the workgroup, then go to town with sorted search
        const uint skinInstanceID = upper_bound_jointCountInclPrefixSum_NBL_GLSL_LESS(0u,skinCount,jointIndex);
        const uint skinInstanceCacheOffset = skinsToUpdate.data[skinInstanceID];

        uint jointCacheOffset = jointIndex;
        if (bool(skinInstanceID))
            jointCacheOffset -= jointCountInclPrefixSum[skinInstanceID-1u];
        jointCacheOffset += skinInstanceCacheOffset;

        uint parentNode = jointNodes.data[jointCacheOffset];
        const uint expectedTimestamp = nodeRecomputedTimestamp.data[parentNode];
        if (skinningRecomputedTimestamps.data[jointCacheOffset]!=expectedTimestamp)
        {
            uint inverseBindPoseOffset = inverseBindPoseOffsets.data[jointCacheOffset];
            mat4x3 globalTransform = nodeGlobalTransforms.data[parentNode];
            mat4x3 bindPose = nbl_glsl_pseudoInverse3x4(inverseBindPoses.data[inverseBindPoseOffset]);
            skinningTransforms.data[jointCacheOffset] = nbl_glsl_pseudoMul4x3with4x3(globalTransform,bindPose);

            skinningRecomputedTimestamps.data[jointCacheOffset] = expectedTimestamp;
        }
    }
}