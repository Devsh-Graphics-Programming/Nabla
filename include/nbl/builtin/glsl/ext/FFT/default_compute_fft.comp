#extension GL_EXT_shader_integer_mix : require

#ifndef _NBL_GLSL_WORKGROUP_SIZE_
#define _NBL_GLSL_WORKGROUP_SIZE_ 256
layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_, local_size_y=1, local_size_z=1) in;
#endif


#include <nbl/builtin/glsl/ext/FFT/types.glsl>


// Input Descriptor
#ifndef _NBL_GLSL_EXT_FFT_INPUT_SET_DEFINED_
#define _NBL_GLSL_EXT_FFT_INPUT_SET_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_EXT_FFT_INPUT_BINDING_DEFINED_
#define _NBL_GLSL_EXT_FFT_INPUT_BINDING_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_EXT_FFT_INPUT_DESCRIPTOR_DEFINED_
#define _NBL_GLSL_EXT_FFT_INPUT_DESCRIPTOR_DEFINED_


layout(set=_NBL_GLSL_EXT_FFT_INPUT_SET_DEFINED_, binding=_NBL_GLSL_EXT_FFT_INPUT_BINDING_DEFINED_) readonly restrict buffer InputBuffer
{
	nbl_glsl_ext_FFT_storage_t inData[];
};
#endif

// Output Descriptor
#ifndef _NBL_GLSL_EXT_FFT_OUTPUT_SET_DEFINED_
#define _NBL_GLSL_EXT_FFT_OUTPUT_SET_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_EXT_FFT_OUTPUT_BINDING_DEFINED_
#define _NBL_GLSL_EXT_FFT_OUTPUT_BINDING_DEFINED_ 1
#endif

#ifndef _NBL_GLSL_EXT_FFT_OUTPUT_DESCRIPTOR_DEFINED_
#define _NBL_GLSL_EXT_FFT_OUTPUT_DESCRIPTOR_DEFINED_
layout(set=_NBL_GLSL_EXT_FFT_OUTPUT_SET_DEFINED_, binding=_NBL_GLSL_EXT_FFT_OUTPUT_BINDING_DEFINED_) writeonly restrict buffer OutputBuffer
{
	nbl_glsl_ext_FFT_storage_t outData[];
};
#endif


#ifndef _NBL_GLSL_EXT_FFT_PUSH_CONSTANTS_DEFINED_
layout(push_constant) uniform PushConstants
{
	layout (offset = 0) nbl_glsl_ext_FFT_Parameters_t params;
} pc;
#define _NBL_GLSL_EXT_FFT_PUSH_CONSTANTS_DEFINED_
#endif 

#ifndef _NBL_GLSL_EXT_FFT_GET_PARAMETERS_DEFINED_
 nbl_glsl_ext_FFT_Parameters_t nbl_glsl_ext_FFT_getParameters()
 {
	 return pc.params;
}
#define _NBL_GLSL_EXT_FFT_GET_PARAMETERS_DEFINED_
#endif

#ifndef _NBL_GLSL_EXT_FFT_SET_DATA_DEFINED_
void nbl_glsl_ext_FFT_setData(in uvec3 coordinate, in uint channel, in nbl_glsl_complex complex_value)
{
	const uint index = nbl_glsl_dot(uvec4(coordinate,channel),nbl_glsl_ext_FFT_Parameters_t_getOutputStrides());
	nbl_glsl_ext_FFT_storage_t_set(outData[index],complex_value);
}
#define _NBL_GLSL_EXT_FFT_SET_DATA_DEFINED_
#endif

// TODO: pad by using shared memory to broadcast copies of the input around (up to 49% VRAM read gains) ?
bool nbl_glsl_ext_FFT_wrap_coord(inout ivec3 coordinate)
{
	const ivec3 dimensions = ivec3(nbl_glsl_ext_FFT_Parameters_t_getDimensions());
	const ivec3 max_coord = dimensions-ivec3(1u);
	
	const ivec3 clamped_coord = clamp(coordinate,ivec3(0),max_coord);
	
	const uint paddingType = nbl_glsl_ext_FFT_Parameters_t_getPaddingType();
	switch (paddingType)
	{
		case _NBL_GLSL_EXT_FFT_PAD_CLAMP_TO_BORDER_:
			if (any(bvec3(coordinate!=clamped_coord)))
				return false;
			coordinate = clamped_coord;
			break;
		case _NBL_GLSL_EXT_FFT_PAD_CLAMP_TO_EDGE_:
			coordinate = clamped_coord;
			break;
		case _NBL_GLSL_EXT_FFT_PAD_REPEAT_:
			{
				const ivec3 negMask = coordinate>>31u;
				const ivec3 d = ((coordinate^negMask)/dimensions)^negMask;
				coordinate = coordinate-d*dimensions;
			}
			break;
		case _NBL_GLSL_EXT_FFT_PAD_MIRROR_:
			{
				const ivec3 negMask = coordinate>>31u;
				const ivec3 d = ((coordinate^negMask)/dimensions)^negMask;
				coordinate = coordinate-d*dimensions;
				const bvec3 flip = bvec3(d&0x1);
				coordinate = mix(coordinate,max_coord-coordinate,flip);
			}
			break;
	}
	return true;
}

#ifndef _NBL_GLSL_EXT_FFT_GET_PADDED_DATA_DEFINED_
nbl_glsl_complex nbl_glsl_ext_FFT_getPaddedData(ivec3 coordinate, in uint channel) 
{
	if (!nbl_glsl_ext_FFT_wrap_coord(coordinate))
		return nbl_glsl_complex(0.f,0.f);
	const uint index = nbl_glsl_dot(uvec4(coordinate,channel),nbl_glsl_ext_FFT_Parameters_t_getInputStrides());
	return nbl_glsl_ext_FFT_storage_t_get(inData[index]);
}
#define _NBL_GLSL_EXT_FFT_GET_PADDED_DATA_DEFINED_
#endif
 

#include "nbl/builtin/glsl/ext/FFT/fft.glsl"


#ifndef _NBL_GLSL_EXT_FFT_MAIN_DEFINED_
#define _NBL_GLSL_EXT_FFT_MAIN_DEFINED_
void main()
{
	for(uint ch=0u; ch<=nbl_glsl_ext_FFT_Parameters_t_getMaxChannel(); ++ch)
		nbl_glsl_ext_FFT(nbl_glsl_ext_FFT_Parameters_t_getIsInverse(),ch);
}
#endif