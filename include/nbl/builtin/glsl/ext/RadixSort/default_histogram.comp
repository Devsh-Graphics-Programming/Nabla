#ifndef _NBL_GLSL_WORKGROUP_SIZE_
#define _NBL_GLSL_WORKGROUP_SIZE_ 256
layout(local_size_x = _NBL_GLSL_WORKGROUP_SIZE_) in;
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_SET_DEFINED_
#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_SET_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_BINDING_DEFINED_
#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_BINDING_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_SET_DEFINED_
#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_SET_DEFINED_ 1
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_BINDING_DEFINED_
#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_BINDING_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_DESCRIPTOR_DEFINED_

layout (set = _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_SET_DEFINED_, binding = _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_BINDING_DEFINED_, std430) restrict writeonly buffer histogram_out_buffer
{
	uint histogram_out_values[];
};

#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_DESCRIPTOR_DEFINED_
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_DESCRIPTOR_DEFINED_

layout (set = _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_SET_DEFINED_, binding = _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_BINDING_DEFINED_, std430) restrict buffer inout_buffer
{
	uvec2 inout_values[];
};

#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_DESCRIPTOR_DEFINED_
#endif

#include "nbl/builtin/glsl/ext/RadixSort/parameters_struct.glsl"
#include "nbl/builtin/glsl/ext/RadixSort/parameters.glsl"

#ifndef _NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_
#error "You need to define `_NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_`!"
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_PUSH_CONSTANTS_DEFINED_

layout(push_constant) uniform PushConstants
{
	layout (offset = 0) nbl_glsl_ext_RadixSort_Parameters_t params;
} pc;

#define _NBL_GLSL_EXT_RADIXSORT_PUSH_CONSTANTS_DEFINED_
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_GET_PARAMETERS_DEFINED_

nbl_glsl_ext_RadixSort_Parameters_t nbl_glsl_ext_RadixSort_getParameters()
{
	return pc.params;
}

#define _NBL_GLSL_EXT_RADIXSORT_GET_PARAMETERS_DEFINED_
#endif

#include <nbl/builtin/glsl/limits/numeric.glsl>

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_GET_PADDED_DATA_DEFINED_

uvec2 nbl_glsl_ext_RadixSort_getPaddedData(in uint idx)
{
	uvec2 data = uvec2(UINT_MAX);
	if (idx < nbl_glsl_ext_RadixSort_Parameters_t_getElementCountTotal())
		data = inout_values[idx];

	return data;
}

#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_GET_PADDED_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_SET_DATA_DEFINED_

void nbl_glsl_ext_RadixSort_setData(in uint idx, in uvec2 data)
{
	if (idx < nbl_glsl_ext_RadixSort_Parameters_t_getElementCountTotal())
		inout_values[idx] = data;
}

#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_SET_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_SET_HISTOGRAM_DEFINED_

void nbl_glsl_ext_RadixSort_setHistogram(in uint idx, in uint val)
{
	histogram_out_values[idx] = val;
}

#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_SET_HISTOGRAM_DEFINED_
#endif

#define _NBL_GLSL_EXT_RADIXSORT_SHARED_SIZE_NEEDED_ (_NBL_GLSL_WORKGROUP_SIZE_ * 2)

#ifdef _NBL_GLSL_SCRATCH_SHARED_DEFINED_
	#if NBL_GLSL_LESS(_NBL_GLSL_SCRATCH_SHARED_SIZE_DEFINED_, _NBL_GLSL_EXT_RADIXSORT_SHARED_SIZE_NEEDED_)
		#error "Not enough shared memory declared"
	#endif
#else
	#define _NBL_GLSL_SCRATCH_SHARED_DEFINED_ nbl_glsl_ext_RadixSort_scratchShared
	#define _NBL_GLSL_SCRATCH_SHARED_SIZE_DEFINED_ _NBL_GLSL_EXT_RADIXSORT_SHARED_SIZE_NEEDED_
	shared uint _NBL_GLSL_SCRATCH_SHARED_DEFINED_[_NBL_GLSL_EXT_RADIXSORT_SHARED_SIZE_NEEDED_];
#endif

uint nbl_glsl_ext_RadixSort_getLocalOffsetAndSetGlobalHistogram(in uint digit, in uint local_histogram[_NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_])
{
	uint last_of_wg_idx = min((gl_WorkGroupID.x + 1u) * _NBL_GLSL_WORKGROUP_SIZE_ - 1u, nbl_glsl_ext_RadixSort_Parameters_t_getElementCountTotal() - 1u);
	if (gl_GlobalInvocationID.x == last_of_wg_idx)
	{
		for (int i = 0; i < _NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_; ++i)
		{
			nbl_glsl_ext_RadixSort_setHistogram(i * gl_NumWorkGroups.x + gl_WorkGroupID.x, local_histogram[i]);
			_NBL_GLSL_SCRATCH_SHARED_DEFINED_[i] = (i == 0) ? 0u : local_histogram[i - 1];
		}
	}
	barrier();

	uint offset = 0u;
	for (uint step = 1u; step < _NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_; step <<= 1)
	{
		if (gl_LocalInvocationIndex >= step && gl_LocalInvocationIndex < _NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_)
		{
			_NBL_GLSL_SCRATCH_SHARED_DEFINED_[(1 - offset) * _NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_ + gl_LocalInvocationIndex] =
				_NBL_GLSL_SCRATCH_SHARED_DEFINED_[offset * _NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_ + gl_LocalInvocationIndex] +
				_NBL_GLSL_SCRATCH_SHARED_DEFINED_[offset * _NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_ + gl_LocalInvocationIndex - step];

		}
		else if (gl_LocalInvocationIndex < step)
		{
			_NBL_GLSL_SCRATCH_SHARED_DEFINED_[(1 - offset) * _NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_ + gl_LocalInvocationIndex] =
				_NBL_GLSL_SCRATCH_SHARED_DEFINED_[offset * _NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_ + gl_LocalInvocationIndex];
		}

		offset = 1 - offset;
		barrier();
	}

	return _NBL_GLSL_SCRATCH_SHARED_DEFINED_[offset * _NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_ + digit];
}

// Poor man's shuffle for two component elements
uvec2 nbl_glsl_ext_RadixSort_scatter(in uvec2 data, in uint scatter_idx)
{
	_NBL_GLSL_SCRATCH_SHARED_DEFINED_[scatter_idx] = data.x;
	_NBL_GLSL_SCRATCH_SHARED_DEFINED_[_NBL_GLSL_WORKGROUP_SIZE_ + scatter_idx] = data.y;
	barrier();

	return uvec2(_NBL_GLSL_SCRATCH_SHARED_DEFINED_[gl_LocalInvocationIndex], _NBL_GLSL_SCRATCH_SHARED_DEFINED_[gl_LocalInvocationIndex + _NBL_GLSL_WORKGROUP_SIZE_]);
}

#include "nbl/builtin/glsl/ext/RadixSort/radix_sort.glsl"

void nbl_glsl_ext_RadixSort_defaultHistogram()
{
	uvec2 data = nbl_glsl_ext_RadixSort_getPaddedData(gl_GlobalInvocationID.x);
	const uint digit = nbl_glsl_ext_RadixSort_extractDigit(data.x);

	groupMemoryBarrier();

	uint local_histogram[_NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_];
	uint scatter_idx = nbl_glsl_ext_RadixSort_workgroupCompactAndHistogram(digit, local_histogram);
	const uint local_offset = nbl_glsl_ext_RadixSort_getLocalOffsetAndSetGlobalHistogram(digit, local_histogram);

	scatter_idx += local_offset;
	barrier();

	data = nbl_glsl_ext_RadixSort_scatter(data, scatter_idx);
	nbl_glsl_ext_RadixSort_setData(gl_GlobalInvocationID.x, data);
}

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_MAIN_DEFINED_

void main()
{
	nbl_glsl_ext_RadixSort_defaultHistogram();
}

#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_MAIN_DEFINED_
#endif