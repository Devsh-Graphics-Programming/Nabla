#ifndef __NBL_BUILD_CONFIG_OPTIONS_H_INCLUDED__
#define __NBL_BUILD_CONFIG_OPTIONS_H_INCLUDED__

// TODO: figure out _ and _ suffixes and prefixes

#cmakedefine _NBL_DEBUG
#cmakedefine _NBL_RELWITHDEBINFO

// architecture (TODO: rethink)
#cmakedefine __NBL_COMPILE_WITH_ARM_SIMD_

// libraries
#cmakedefine _NBL_COMPILE_WITH_GLI_
#cmakedefine _NBL_COMPILE_WITH_OPEN_EXR_

// OS
#cmakedefine _NBL_PLATFORM_WINDOWS_
#cmakedefine _NBL_PLATFORM_LINUX_
#cmakedefine _NBL_PLATFORM_OSX_
#cmakedefine _NBL_PLATFORM_ANDROID_

// graphics API backend
#cmakedefine _NBL_COMPILE_WITH_VULKAN_

// loaders
#cmakedefine _NBL_COMPILE_WITH_MITSUBA_SERIALIZED_LOADER_
#cmakedefine _NBL_COMPILE_WITH_MTL_LOADER_
#cmakedefine _NBL_COMPILE_WITH_OBJ_LOADER_
#cmakedefine _NBL_COMPILE_WITH_STL_LOADER_
#cmakedefine _NBL_COMPILE_WITH_PLY_LOADER_
#cmakedefine _NBL_COMPILE_WITH_BAW_LOADER_
#cmakedefine _NBL_COMPILE_WITH_JPG_LOADER_
#cmakedefine _NBL_COMPILE_WITH_PNG_LOADER_
#cmakedefine _NBL_COMPILE_WITH_TGA_LOADER_
#ifdef _NBL_COMPILE_WITH_OPEN_EXR_
#cmakedefine _NBL_COMPILE_WITH_OPENEXR_LOADER_
#endif
#ifdef _NBL_COMPILE_WITH_GLI_
#cmakedefine _NBL_COMPILE_WITH_GLI_LOADER_
#endif
#cmakedefine _NBL_COMPILE_WITH_GLTF_LOADER_

// writers
#cmakedefine _NBL_COMPILE_WITH_STL_WRITER_
#cmakedefine _NBL_COMPILE_WITH_PLY_WRITER_
#cmakedefine _NBL_COMPILE_WITH_BAW_WRITER_
#cmakedefine _NBL_COMPILE_WITH_TGA_WRITER_
#cmakedefine _NBL_COMPILE_WITH_JPG_WRITER_
#cmakedefine _NBL_COMPILE_WITH_PNG_WRITER_
#ifdef _NBL_COMPILE_WITH_OPEN_EXR_
#cmakedefine _NBL_COMPILE_WITH_OPENEXR_WRITER_
#endif
#ifdef _NBL_COMPILE_WITH_GLI_
#cmakedefine _NBL_COMPILE_WITH_GLI_WRITER_
#endif
#cmakedefine _NBL_COMPILE_WITH_GLTF_WRITER_

// compute interop
#cmakedefine _NBL_COMPILE_WITH_CUDA_
#cmakedefine _NBL_BUILD_OPTIX_

// extra config
#cmakedefine __NBL_FAST_MATH
#cmakedefine NBL_EMBED_BUILTIN_RESOURCES

#cmakedefine _NBL_BUILD_DPL_

// TODO: This has to disapppear from the main header and go to the OptiX extension header + config
#cmakedefine OPTIX_INCLUDE_DIR "@OPTIX_INCLUDE_DIR@"

// DXC compile flags
#cmakedefine DXC_COMPILE_FLAGS "@DXC_COMPILE_FLAGS@"

#if defined(_NBL_DEBUG) || defined(_NBL_RELWITHDEBINFO)
#define _NBL_EG_PRFNT_LEVEL @_NBL_EG_PRFNT_LEVEL@
#if _NBL_EG_PRFNT_LEVEL == 1
#define _NBL_EG_OP_LNK(_x) ShellExecuteA(NULL, "open", "https://www.youtube.com/watch?v=4HXeL_yimMs", NULL, NULL, SW_SHOWNORMAL)
#elif _NBL_EG_PRFNT_LEVEL == 2
#define _NBL_EG_OP_LNK(_x) ShellExecuteA(NULL, "open", "https://www.youtube.com/watch?v=4HXeL_yimMs", NULL, NULL, SW_SHOWNORMAL)
#elif _NBL_EG_PRFNT_LEVEL >= 3
#define _NBL_EG_OP_LNK(_x) ShellExecuteA(NULL, "open", "https://www.youtube.com/watch?v=4HXeL_yimMs", NULL, NULL, SW_SHOWNORMAL)
#endif
#endif

#define NBL_BUILTIN_RESOURCES_DIRECTORY_PATH "@NBL_BUILTIN_RESOURCES_DIRECTORY_PATH@"
#define SPIRV_BUILTIN_RESOURCES_DIRECTORY_PATH "@SPIRV_BUILTIN_RESOURCES_DIRECTORY_PATH@"
#define BOOST_BUILTIN_RESOURCES_DIRECTORY_PATH "@BOOST_BUILTIN_RESOURCES_DIRECTORY_PATH@"
#define DEVICEGEN_BUILTIN_RESOURCES_DIRECTORY_PATH "@DEVICEGEN_BUILTIN_RESOURCES_DIRECTORY_PATH@"

// DLL exports
#cmakedefine _NBL_SHARED_BUILD_
#ifdef _NBL_SHARED_BUILD_
    #if defined(__NBL_BUILDING_NABLA__) // currently compiling nabla, this define is passed through the commandline
        #if defined(_MSC_VER)
            #define NBL_API2 __declspec(dllexport)
        #elif defined(__GNUC__)
            #define NBL_API2 __attribute__ ((visibility ("default")))
        #endif
    #else
        #if defined(_MSC_VER)
            #define NBL_API2 __declspec(dllimport)
        #else
            #define NBL_API2
        #endif
    #endif
#else
    #define NBL_API2
#endif

// any other target definitions for using Nabla as framework in another project
#ifndef __NBL_BUILDING_NABLA__
#include "define.h"
#endif // __NBL_BUILDING_NABLA__

#endif // __NBL_BUILD_CONFIG_OPTIONS_H_INCLUDED__