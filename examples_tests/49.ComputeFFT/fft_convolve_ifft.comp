layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_, local_size_y=1, local_size_z=1) in;

layout(set=0, binding=2) uniform sampler2D NormalizedKernel[3];

/* TODO: Hardcode the parameters for the frequent FFTs
uvec3 nbl_glsl_ext_FFT_Parameters_t_getDimensions()
{
	return uvec3(1280u,1024u,1u);
}
bool nbl_glsl_ext_FFT_Parameters_t_getIsInverse()
{
	return false;
}
uint nbl_glsl_ext_FFT_Parameters_t_getDirection()
{
	return 0u;
}
uint nbl_glsl_ext_FFT_Parameters_t_getMaxChannel()
{
    return 2u;
}
uint nbl_glsl_ext_FFT_Parameters_t_getLog2FFTSize()
{
    return 11u;
}
uint nbl_glsl_ext_FFT_Parameters_t_getPaddingType()
{
    return 3u; // _NBL_GLSL_EXT_FFT_PAD_MIRROR_;
}
uvec4 nbl_glsl_ext_FFT_Parameters_t_getInputStrides()
{
	return uvec4(1024u,1u,0u,1024u*1280u);
}
uvec4 nbl_glsl_ext_FFT_Parameters_t_getOutputStrides()
{
	return uvec4(1u,1280u,0u,1280u*1024u);
}
#define _NBL_GLSL_EXT_FFT_PARAMETERS_METHODS_DECLARED_
*/

#include "extra_parameters.glsl"
layout(push_constant) uniform PushConstants
{
	convolve_parameters_t params;
} pc;
#define _NBL_GLSL_EXT_FFT_PUSH_CONSTANTS_DEFINED_

nbl_glsl_ext_FFT_Parameters_t nbl_glsl_ext_FFT_getParameters()
{
	return pc.params.fft;
}
#define _NBL_GLSL_EXT_FFT_GET_PARAMETERS_DEFINED_

#define _NBL_GLSL_EXT_FFT_MAIN_DEFINED_
#include "nbl/builtin/glsl/ext/FFT/default_compute_fft.comp"

void convolve(in uint item_per_thread_count, in uint ch) 
{
	// TODO: decouple kernel size from image size (can't get the math to work in my head)
	for(uint t=0u; t<item_per_thread_count; t++)
	{
		const uint tid = _NBL_GLSL_WORKGROUP_SIZE_*t+gl_LocalInvocationIndex;

		nbl_glsl_complex sourceSpectrum = nbl_glsl_ext_FFT_impl_values[t];
		
		//
		const uvec3 coords = nbl_glsl_ext_FFT_getCoordinates(tid);
        vec2 uv = vec2(bitfieldReverse(coords.xy))/vec2(4294967296.f)+pc.params.kernel_half_pixel_size;
		//
		nbl_glsl_complex convSpectrum = textureLod(NormalizedKernel[ch],uv,0).xy;
		nbl_glsl_ext_FFT_impl_values[t] = nbl_glsl_complex_mul(sourceSpectrum,convSpectrum);
	}
}

void main()
{
    const uint log2FFTSize = nbl_glsl_ext_FFT_Parameters_t_getLog2FFTSize();
    const uint item_per_thread_count = 0x1u<<(log2FFTSize-_NBL_GLSL_WORKGROUP_SIZE_LOG2_);
	
	for(uint ch=0u; ch<=nbl_glsl_ext_FFT_Parameters_t_getMaxChannel(); ++ch)
	{
		// Load Values into local memory
		for(uint t=0u; t<item_per_thread_count; t++)
		{
			const uint tid = (t<<_NBL_GLSL_WORKGROUP_SIZE_LOG2_)|gl_LocalInvocationIndex;
			const uint trueDim = nbl_glsl_ext_FFT_Parameters_t_getDimensions()[nbl_glsl_ext_FFT_Parameters_t_getDirection()];
			nbl_glsl_ext_FFT_impl_values[t] = nbl_glsl_ext_FFT_getPaddedData(nbl_glsl_ext_FFT_getPaddedCoordinates(tid,log2FFTSize,trueDim),ch);
		}
		nbl_glsl_ext_FFT_preloaded(false,log2FFTSize);
		barrier();

		convolve(item_per_thread_count,ch);
	
		barrier();
		nbl_glsl_ext_FFT_preloaded(true,log2FFTSize);
		// write out to main memory
		// we override the setting to happen with padded coordinates because we dont want the padding to be written at all
		for(uint t=0u; t<item_per_thread_count; t++)
		{
			const uint tid = (t<<_NBL_GLSL_WORKGROUP_SIZE_LOG2_)|gl_LocalInvocationIndex;
			const uint trueDim = nbl_glsl_ext_FFT_Parameters_t_getDimensions()[nbl_glsl_ext_FFT_Parameters_t_getDirection()];
			// we also prevent certain threads from writing the memory out
			const uint padding = ((0x1u<<log2FFTSize)-trueDim)>>1u;
			const uint shifted = tid-padding;
			if (tid>=padding && shifted<trueDim)
				nbl_glsl_ext_FFT_setData(ivec3(nbl_glsl_ext_FFT_getCoordinates(shifted)),ch,nbl_glsl_ext_FFT_impl_values[t]);
		}
	}
}