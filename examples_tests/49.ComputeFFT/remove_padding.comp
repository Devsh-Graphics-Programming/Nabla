// Copyright (C) 2018-2020 - DevSH Graphics Programming Sp. z O.O.
// This file is part of the "Nabla Engine".
// For conditions of distribution and use, see copyright notice in nabla.h

#version 430 core

#include <nbl/builtin/glsl/math/complex.glsl>

layout(local_size_x=16, local_size_y=16, local_size_z=1) in;
 
layout(set=0, binding=0) restrict readonly buffer Buffer
{
	nbl_glsl_complex data[];
};

layout(set=0, binding=1, rgba16f) uniform image2D outImage;

layout(push_constant) uniform PushConstants
{
    layout (offset = 0) uvec3 padded_dimension;
    layout (offset = 16) uvec3 kernel_dimension;
    layout (offset = 32) uint numChannels;
} pc;

void main()
{
    uvec2 dimension = imageSize(outImage);
    uvec2 padded_dimension = pc.padded_dimension.xy;

    uint pad_left = pc.kernel_dimension.x / 2;
    uint pad_top = pc.kernel_dimension.y / 2;
    ivec2 coords = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    ivec2 padded_coords = ivec2(pad_left + gl_GlobalInvocationID.x, pad_top + gl_GlobalInvocationID.y);

    vec4 color_value = vec4(0, 0, 0, 0);
    for(uint c = 0; c < pc.numChannels; ++c) {
	    uint index = c * (padded_dimension.x * padded_dimension.y) + padded_coords.y * (padded_dimension.x) + padded_coords.x;
        color_value[c] = data[index].x;
    }
    imageStore(outImage, coords, color_value);
}