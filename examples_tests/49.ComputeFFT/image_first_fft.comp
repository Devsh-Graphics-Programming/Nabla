layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_, local_size_y=1, local_size_z=1) in;

// Input Descriptor
layout(set=0, binding=0) uniform sampler2D inputImage;
#define _NBL_GLSL_EXT_FFT_INPUT_DESCRIPTOR_DEFINED_

#include <nbl/builtin/glsl/math/complex.glsl>
nbl_glsl_complex nbl_glsl_ext_FFT_getPaddedData(in ivec3 coordinate, in uint channel) 
{
	ivec2 inputImageSize = textureSize(inputImage, 0);
	vec2 normalizedCoords = (vec2(coordinate.xy)+vec2(0.5f))/(vec2(inputImageSize)*KERNEL_SCALE);
	vec4 texelValue = textureLod(inputImage, normalizedCoords+vec2(0.5-0.5/KERNEL_SCALE), -log2(KERNEL_SCALE));
	return nbl_glsl_complex(texelValue[channel], 0.0f);
}
#define _NBL_GLSL_EXT_FFT_GET_PADDED_DATA_DEFINED_


/* TODO: Hardcode the parameters for the frequent FFTs
#if _NBL_GLSL_EXT_FFT_MAX_DIM_SIZE_>512
uvec3 nbl_glsl_ext_FFT_Parameters_t_getDimensions()
{
	return uvec3(1280u,720u,1u);
}
bool nbl_glsl_ext_FFT_Parameters_t_getIsInverse()
{
	return false;
}
uint nbl_glsl_ext_FFT_Parameters_t_getDirection()
{
	return 1u;
}
uint nbl_glsl_ext_FFT_Parameters_t_getMaxChannel()
{
    return 2u;
}
uint nbl_glsl_ext_FFT_Parameters_t_getLog2FFTSize()
{
    return 10u;
}
uint nbl_glsl_ext_FFT_Parameters_t_getPaddingType()
{
    return 3u; // _NBL_GLSL_EXT_FFT_PAD_MIRROR_;
}
uvec4 nbl_glsl_ext_FFT_Parameters_t_getInputStrides()
{
	return uvec4(0xdeadbeefu);
}
uvec4 nbl_glsl_ext_FFT_Parameters_t_getOutputStrides()
{
	return uvec4(1024u,1u,0u,1024u*1280u);
}
#define _NBL_GLSL_EXT_FFT_PARAMETERS_METHODS_DECLARED_
#endif
*/

#include "nbl/builtin/glsl/ext/FFT/default_compute_fft.comp"