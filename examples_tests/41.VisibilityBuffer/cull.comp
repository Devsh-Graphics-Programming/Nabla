#version 430 core

#include "rasterizationCommon.h"
layout(local_size_x = WORKGROUP_SIZE) in;

#include <nbl/builtin/glsl/utils/indirect_commands.glsl>

layout(set=0, binding=0, std430, row_major) restrict readonly buffer PerInstanceCull
{
    CullData_t cullData[];
};
layout(set=0, binding=1, std430) restrict coherent buffer IndirectDraws
{
    nbl_glsl_DrawElementsIndirectCommand_t draws[];
} commandBuff;
layout(set=0, binding=2, std430) restrict coherent buffer MVPs
{
    mat4 mvps[];
} mvpBuff;



layout(push_constant, row_major) uniform PushConstants
{
    CullShaderData_t data;
} pc;



#include <nbl/builtin/glsl/utils/culling.glsl>
#include <nbl/builtin/glsl/utils/transform.glsl>


void main()
{
    if (gl_GlobalInvocationID.x >= pc.data.maxBatchCount)
        return;

    mvpBuff.mvps[gl_GlobalInvocationID.x] = pc.data.viewProjMatrix;

    if (bool(pc.data.freezeCulling))
        return;

    const CullData_t batchCullData = cullData[gl_GlobalInvocationID.x];

    const mat2x3 bbox = mat2x3(batchCullData.aabbMinEdge,batchCullData.aabbMaxEdge);
    bool couldBeVisible = nbl_glsl_couldBeVisible(pc.data.viewProjMatrix,bbox);

    commandBuff.draws[batchCullData.drawCommandGUID].instanceCount = couldBeVisible == true ? 1 : 0;
}