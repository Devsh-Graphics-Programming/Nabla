#version 430 core
#extension GL_EXT_shader_16bit_storage : require

#line 4 // so we get good line numbers for errors
#include "common.glsl"
layout (local_size_x = SHADING_WG_SIZE_X, local_size_y = SHADING_WG_SIZE_Y) in;

#include <nbl/builtin/glsl/virtual_texturing/extensions.glsl>
#define _NBL_VT_DESCRIPTOR_SET 0
#define _NBL_VT_FLOAT_VIEWS
#define _NBL_VT_INT_VIEWS_COUNT 0
#define _NBL_VT_INT_VIEWS
#define _NBL_VT_UINT_VIEWS_COUNT 0
#define _NBL_VT_UINT_VIEWS
#include <nbl/builtin/glsl/virtual_texturing/descriptors.glsl>
layout (set = 0, binding = 2, std430) restrict readonly buffer PrecomputedStuffSSBO
{
    uint pgtab_sz_log2;
    float vtex_sz_rcp;
    float phys_pg_tex_sz_rcp[_NBL_VT_MAX_PAGE_TABLE_LAYERS];
    uint layer_to_sampler_ix[_NBL_VT_MAX_PAGE_TABLE_LAYERS];
} precomputed;

layout(set = 3, binding = 0) uniform usampler2D vBuffer;
layout(set = 3, binding = 1, rgba8) uniform image2D frameBuffer;

#include <nbl/builtin/glsl/loader/mtl/common.glsl>
BatchInstanceData gBatchInstance;
nbl_glsl_MTLMaterialParameters nbl_glsl_getMaterialParameters() // this function is for MTL's shader only
{
    nbl_glsl_MTLMaterialParameters mtl_params;
    mtl_params.Ka = gBatchInstance.Ka;
    mtl_params.Kd = gBatchInstance.Kd;
    mtl_params.Ks = gBatchInstance.Ks;
    mtl_params.Ke = gBatchInstance.Ke;
    mtl_params.Ns = gBatchInstance.Ns;
    mtl_params.d = gBatchInstance.d;
    mtl_params.Ni = gBatchInstance.Ni;
    mtl_params.extra = gBatchInstance.extra;
    return mtl_params;
}
#define _NBL_FRAG_GET_MATERIAL_PARAMETERS_FUNCTION_DEFINED_


uint nbl_glsl_VT_layer2pid(in uint layer)
{
    return precomputed.layer_to_sampler_ix[layer];
}
uint nbl_glsl_VT_getPgTabSzLog2()
{
    return precomputed.pgtab_sz_log2;
}
float nbl_glsl_VT_getPhysPgTexSzRcp(in uint layer)
{
    return precomputed.phys_pg_tex_sz_rcp[layer];
}
float nbl_glsl_VT_getVTexSzRcp()
{
    return precomputed.vtex_sz_rcp;
}
#define _NBL_USER_PROVIDED_VIRTUAL_TEXTURING_FUNCTIONS_
#if PAGE_SZ_LOG2!=7||PAGE_PADDING!=8
    #error "Adjust the include path for the VT functions!"
#endif
#include <nbl/builtin/glsl/virtual_texturing/functions.glsl/7/8>

vec4 nbl_sample_Ka(in vec2 uv, in mat2 dUV)   { return nbl_glsl_vTextureGrad(gBatchInstance.map_Ka_data, uv, dUV); }
vec4 nbl_sample_Kd(in vec2 uv, in mat2 dUV)   { return nbl_glsl_vTextureGrad(gBatchInstance.map_Kd_data, uv, dUV); }
vec4 nbl_sample_Ks(in vec2 uv, in mat2 dUV)   { return nbl_glsl_vTextureGrad(gBatchInstance.map_Ks_data, uv, dUV); }
vec4 nbl_sample_Ns(in vec2 uv, in mat2 dUV)   { return nbl_glsl_vTextureGrad(gBatchInstance.map_Ns_data, uv, dUV); }
vec4 nbl_sample_d(in vec2 uv, in mat2 dUV)    { return nbl_glsl_vTextureGrad(gBatchInstance.map_d_data, uv, dUV); }
vec4 nbl_sample_bump(in vec2 uv, in mat2 dUV) { return nbl_glsl_vTextureGrad(gBatchInstance.map_bump_data, uv, dUV); }
#define _NBL_TEXTURE_SAMPLE_FUNCTIONS_DEFINED_


mat2x3 dPdBary;
mat2x3 nbl_glsl_perturbNormal_dPdSomething()
{
    return dPdBary;
}
mat2 dUVdBary;
mat2 nbl_glsl_perturbNormal_dUVdSomething()
{
    return dUVdBary;
}
#define _NBL_BUILTIN_GLSL_BUMP_MAPPING_DERIVATIVES_DECLARED_

layout (push_constant) uniform Block 
{
    vec3 camPos;
} pc;
#define _NBL_FRAG_PUSH_CONSTANTS_DEFINED_

#define _NBL_FRAG_INPUTS_DEFINED_
#define _NBL_FRAG_OUTPUTS_DEFINED_
#define _NBL_FRAG_SET3_BINDINGS_DEFINED_
#define _NBL_FRAG_MAIN_DEFINED_
vec2 UV;
mat2 dUVdScreen;
mat2 nbl_glsl_dUVdScreen()
{
    return dUVdScreen;
}
#define _NBL_FRAG_GET_UV_DERIVATIVES_FUNCTION_DEFINED_
// weird globals for the overriden MTL fragment shader
vec3 ViewPos;
#include <nbl/builtin/shader/loader/mtl/fragment_impl.glsl>


#include <nbl/builtin/glsl/colorspace/OETF.glsl>

vec3 uintIDToColor(uint id)
{
    return vec3(bitfieldExtract(id,0,4),bitfieldExtract(id,4,4),bitfieldExtract(id,8,4))/15.0;
}


#define VISIBLE_BUFF_SET 3
#define VISIBLE_BUFF_BINDING 2

#ifdef OCCLUSION_QUERY

#define CUBE_COMMAND_BUFF_SET 3
#define CUBE_COMMAND_BUFF_BINDING 3
#define OCCLUSION_DISPATCH_INDIRECT_BUFF_SET 3
#define OCCLUSION_DISPATCH_INDIRECT_BUFF_BINDING 4

#endif


#include "occlusionCullingShaderCommon.glsl"

void main()
{
    const ivec2 fragCoord = ivec2(gl_GlobalInvocationID);
    if (any(greaterThanEqual(fragCoord,textureSize(vBuffer,0))))
        return;

    vec4 color = vec4(0,0,0,1);

    const uvec4 triangleIDdrawID_unorm16Bary_dBarydScreenHalf2x2 = texelFetch(vBuffer,fragCoord,0);
    if (triangleIDdrawID_unorm16Bary_dBarydScreenHalf2x2[0] != 0xffFFffFFu)
    {
        const int triangleIDBitcount = findMSB(MAX_TRIANGLES_IN_BATCH-1)+1;
        const uint drawGUID = bitfieldExtract(triangleIDdrawID_unorm16Bary_dBarydScreenHalf2x2[0],triangleIDBitcount,32-triangleIDBitcount);
        const uint triangleID = bitfieldExtract(triangleIDdrawID_unorm16Bary_dBarydScreenHalf2x2[0],0,triangleIDBitcount);
        const vec2 bary = unpackUnorm2x16(triangleIDdrawID_unorm16Bary_dBarydScreenHalf2x2[1]);
        const mat2 dBary = mat2(
            unpackHalf2x16(triangleIDdrawID_unorm16Bary_dBarydScreenHalf2x2[2]),
            unpackHalf2x16(triangleIDdrawID_unorm16Bary_dBarydScreenHalf2x2[3])
        );

        gBatchInstance = batchInstanceData[drawGUID];
        uvec3 vertexIDs;
        const uint baseTriangleVertex = triangleID*3u+gBatchInstance.firstIndex;
        for (uint i=0u; i<3u; i++)
            vertexIDs[i] = nbl_glsl_VG_fetchTriangleVertexIndex(baseTriangleVertex,i);

        vec3 pos,normal;
        {
            vec3 positions[3];
            vec2 uvs[3];
            // wrap this up into a template macro?
            for (int i=0; i<3; i++)
            {
                positions[i] = nbl_glsl_fetchVtxPos(vertexIDs[i],drawGUID);
                uvs[i] = nbl_glsl_fetchVtxUV(vertexIDs[i],drawGUID);
            }

            // maybe could wrap this up into a function
            dPdBary[0] = positions[0]-positions[2];
            dPdBary[1] = positions[1]-positions[2];
            pos = dPdBary*bary+positions[2]; // TODO: compute from depth buffer or from barycentric? [Need Vib benchmark]

            dUVdBary[0] = uvs[0]-uvs[2];
            dUVdBary[1] = uvs[1]-uvs[2];
            UV = dUVdBary*bary+uvs[2];

            dUVdScreen = nbl_glsl_applyChainRule2D(dUVdBary,dBary);


            const float lastBary = 1.f-bary.x-bary.y;

            normal = nbl_glsl_fetchVtxNormal(vertexIDs[0],drawGUID)*bary.x;
            normal += nbl_glsl_fetchVtxNormal(vertexIDs[1],drawGUID)*bary.y;
            normal += nbl_glsl_fetchVtxNormal(vertexIDs[2],drawGUID)*lastBary;
            normal = normalize(normal);
        }
        
        // the lighting is completely meh (note: we assume there's no modelspace to world transform)
        ViewPos = pos-pc.camPos; // weird global for MTL shader
        nbl_glsl_IsotropicViewSurfaceInteraction interaction = nbl_glsl_calcSurfaceInteraction(pc.camPos,pos,normal);
        color.rgb = nbl_computeLighting(interaction);

        visibleBuff.visible[drawGUID] = uint16_t(1u);

        #ifdef OCCLUSION_QUERY
        if(gl_GlobalInvocationID.x == 0)
        {
            cubeIndirectDraw.draw.instanceCount = 0;
            occlusionDispatchIndirect.di.num_groups_x = 0;
        }
        #endif
    }

    imageStore(frameBuffer,fragCoord,vec4(nbl_glsl_oetf_sRGB(color.rgb),color.a));
}