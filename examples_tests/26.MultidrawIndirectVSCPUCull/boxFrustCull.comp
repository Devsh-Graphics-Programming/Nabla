// Copyright (C) 2018-2020 - DevSH Graphics Programming Sp. z O.O.
// This file is part of the "Nabla Engine".
// For conditions of distribution and use, see copyright notice in nabla.h

#version 430 core

#include "common.glsl"
#include "commonIndirect.glsl"

layout(local_size_x = kCullWorkgroupSize) in;

layout(set = 1, binding = 0, std430, row_major) restrict writeonly buffer PerDraw
{
    DrawData_t drawData[];
};
layout(set = 1, binding = 1, std430) restrict writeonly buffer IndirectDraws
{
    nbl_glsl_DrawElementsIndirectCommand_t draws[];
};
layout(set = 1, binding = 2, std430, row_major) restrict readonly buffer PerInstance
{
    ModelData_t modelData[];
};

layout(push_constant, row_major) uniform PushConstants
{
    CullShaderData_t data;
} pc;


void main()
{
    uint drawID = gl_GlobalInvocationID.x;
    if (drawID>=pc.data.maxDrawCount)
        return;

    mat4x3 worldMatrix = modelData[drawID].worldMatrix;
    mat4 MVP = nbl_glsl_pseudoMul4x4with4x3(pc.data.viewProjMatrix,worldMatrix);

    bool notCulled = true;
    if (pc.data.cull!=0u)
    {
        mat2x3 bbox;
        bbox[0] = modelData[drawID].bbox[0];
        bbox[1] = modelData[drawID].bbox[1];
        notCulled = nbl_glsl_couldBeVisible(MVP,bbox);
    }

    draws[drawID].instanceCount = notCulled ? 1u:0u;
    if (notCulled)
    {
        drawData[drawID].modelViewProjMatrix = MVP;
        drawData[drawID].normalMatrix = pc.data.viewInverseTransposeMatrix*modelData[drawID].normalMatrix;
    }
}
