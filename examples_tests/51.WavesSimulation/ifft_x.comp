#define _NBL_GLSL_WORKGROUP_SIZE_ 256

layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_, local_size_y=1, local_size_z=1) in;

#define _NBL_GLSL_EXT_FFT_MAX_CHANNELS 3
#define _NBL_GLSL_EXT_FFT_GET_PARAMETERS_DEFINED_
#define _NBL_GLSL_EXT_FFT_GET_DATA_DEFINED_
#define _NBL_GLSL_EXT_FFT_SET_DATA_DEFINED_
#define _NBL_GLSL_EXT_FFT_GET_PADDED_DATA_DEFINED_
#include "nbl/builtin/glsl/ext/FFT/fft.glsl"
#include "waves_common.glsl"


layout(set = 0, binding = 0, std430) buffer H0_DATA
{
	mat2 data[];
} primary_calculations;

layout(set = 0, binding = 1, std430) buffer IFFT_X_OUT
{
	mat3x2 data[];
} ifft_x_out;

layout(push_constant) uniform PUSH_CONSTANTS
{
	nbl_glsl_ext_FFT_Parameters_t params;
	uvec2 IMG_SIZE;
	vec2 LENGTH_UNIT;
	float TIME;
} u_pc;

mat3x2 precomputed_values[_NBL_GLSL_EXT_FFT_MAX_ITEMS_PER_THREAD * 2]; 

mat3x2 animate(uvec2 c)
{
	const uint ssbo_index = c.y * u_pc.IMG_SIZE.x + c.x;
	const mat2 h0_data = primary_calculations.data[ssbo_index];
	const vec2 h0k = h0_data[0];
	const vec2 h0_conj = h0_data[1];

	vec2 coord = ivec2(c.xy) - ivec2(u_pc.IMG_SIZE) / 2;
    vec2 k = 2 * nbl_glsl_PI * coord / u_pc.LENGTH_UNIT;
	float wkt = sqrt(length(k) * G) * u_pc.TIME; 
	
	float k2 = dot(k, k);
	float k2_r = k2 > 1e-12 ? 1 / sqrt(k2) : 0;
	k *= k2_r;

	mat3x2 anim;
	anim[2] = nbl_glsl_complex_mul(h0k, nbl_glsl_expImaginary(wkt)) + 
			   nbl_glsl_complex_mul(h0_conj, nbl_glsl_expImaginary(-wkt));
	anim[0] = nbl_glsl_complex_conjugate(anim[2] * k.x);
	anim[1] = nbl_glsl_complex_conjugate(anim[2] * k.y);

	return anim;
}

void animateSpectrumForIFFT()
{
	const uint dataLength = nbl_glsl_ext_FFT_getDimLength(nbl_glsl_ext_FFT_Parameters_t_getPaddedDimensions());
    const uint num_virtual_threads = ((dataLength >> 1)-1u)/(_NBL_GLSL_EXT_FFT_WORKGROUP_SIZE_)+1u;
    const uint thread_offset = gl_LocalInvocationIndex;
	const uint loop_max = num_virtual_threads * 2;
	for(uint t = 0u; t < loop_max; t+=2)
	{
	    const uint tid = thread_offset + t * _NBL_GLSL_EXT_FFT_WORKGROUP_SIZE_;

	    const uint even_index = nbl_glsl_ext_FFT_getEvenIndex(tid, 0, dataLength); 
	    const uint odd_index = even_index + 1; 

	    const uvec3 coords_e = nbl_glsl_ext_FFT_getCoordinates(even_index);
	    const uvec3 coords_o = nbl_glsl_ext_FFT_getCoordinates(odd_index);
	    precomputed_values[t] = animate(coords_e.xy);
	    precomputed_values[t + 1] = animate(coords_o.xy);

	}

}

uint getIndex(uvec2 coord)
{
	const uint index = coord[nbl_glsl_ext_FFT_Parameters_t_getDirection()];
	const uint even_index = index & UINT_MAX - 1;
	
	const uint data_length = nbl_glsl_ext_FFT_getDimLength(nbl_glsl_ext_FFT_Parameters_t_getPaddedDimensions());
	const uint tid = even_index / 2;
	const uint thread_offset = gl_LocalInvocationIndex;
	const uint t = (tid - thread_offset) / _NBL_GLSL_EXT_FFT_WORKGROUP_SIZE_;

	return 2 * t + uint(index == even_index);
}

void main()
{
	animateSpectrumForIFFT();
	for(uint channel = 0; channel < 3; channel++)
		nbl_glsl_ext_FFT(true, channel);
}

nbl_glsl_ext_FFT_Parameters_t nbl_glsl_ext_FFT_getParameters() {
	 nbl_glsl_ext_FFT_Parameters_t ret;
	 ret = u_pc.params;
	 return ret;
 }

nbl_glsl_complex nbl_glsl_ext_FFT_getData(in uvec3 coordinate, in uint channel)
{
	uvec3 dimension = nbl_glsl_ext_FFT_Parameters_t_getDimensions();
	uint index = getIndex(coordinate.xy);
	return precomputed_values[index][channel];
}


void nbl_glsl_ext_FFT_setData(in uvec3 coordinate, in uint channel, in nbl_glsl_complex complex_value)
{
	uvec3 dimension = nbl_glsl_ext_FFT_Parameters_t_getPaddedDimensions();
	uint index = coordinate.y * dimension.x + coordinate.x;
	ifft_x_out.data[index][channel] = complex_value;
}

nbl_glsl_complex nbl_glsl_ext_FFT_getPaddedData(in uvec3 coordinate, in uint channel) {
	return nbl_glsl_ext_FFT_getData(coordinate, channel);
}
