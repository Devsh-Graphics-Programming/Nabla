#version 450 
#include <nbl/builtin/glsl/math/complex.glsl>

#define G 9.8
#define cvec3 mat3x2

layout(local_size_x = 16, local_size_y = 16) in;


layout(set = 0, binding = 0, std430) buffer H0_DATA
{
	cvec3 data[];
} primary_calculations;


layout(set = 0, binding = 1, rgba8) uniform image2D animated;

layout(push_constant) uniform PUSH_CONSTANTS
{
	float TIME;
	uvec2 IMG_SIZE;
} u_pc;

#define EI(x) vec2(cos(x), sin(x))
void main()
{
	if (all(lessThan(gl_GlobalInvocationID.xy, u_pc.IMG_SIZE)))
	{
        uint ssbo_index = gl_GlobalInvocationID.y * u_pc.IMG_SIZE.x + gl_GlobalInvocationID.x;
		vec2 h0k = primary_calculations.data[ssbo_index][0];
		vec2 h0_conj = primary_calculations.data[ssbo_index][1];
		vec2 k = primary_calculations.data[ssbo_index][2];

		float wk = sqrt(length(k) * G); 

		vec2 res = nbl_glsl_complex_mul(h0k, vec2(cos(wk * u_pc.TIME), sin(wk * u_pc.TIME))) + 
				   nbl_glsl_complex_mul(h0_conj, vec2(cos(wk * u_pc.TIME), -sin(wk * u_pc.TIME)));

		imageStore(animated, ivec2(gl_GlobalInvocationID.xy), vec4(res, 0, 0));
	}

}