#define _NBL_GLSL_WORKGROUP_SIZE_ 256
layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_, local_size_y=1, local_size_z=1) in;

#define _NBL_GLSL_EXT_FFT_MAX_CHANNELS 1
#define _NBL_GLSL_EXT_FFT_GET_PARAMETERS_DEFINED_
#define _NBL_GLSL_EXT_FFT_GET_DATA_DEFINED_
#define _NBL_GLSL_EXT_FFT_SET_DATA_DEFINED_
#define _NBL_GLSL_EXT_FFT_GET_PADDED_DATA_DEFINED_
#include "nbl/builtin/glsl/ext/FFT/fft.glsl"


layout(set = 0, binding = 0, std430) buffer IFFT_X_IN
{
	vec2 data[];
} ifft_x_in;

layout(set = 0, binding = 1, rgba8) uniform image2D heightmap;

layout(push_constant) uniform PUSH_CONSTANTS
{
	nbl_glsl_ext_FFT_Parameters_t params;
} u_pc;

void main()
{
	//if (all(lessThan(gl_GlobalInvocationID.xy, u_pc.params.dimension.xy)))
	{
		nbl_glsl_ext_FFT(true, 0);
	}
}

nbl_glsl_ext_FFT_Parameters_t nbl_glsl_ext_FFT_getParameters() {
	 nbl_glsl_ext_FFT_Parameters_t ret;
	 ret = u_pc.params;
	 return ret;
}

nbl_glsl_complex nbl_glsl_ext_FFT_getData(in uvec3 coordinate, in uint channel)
{
	nbl_glsl_complex retValue = nbl_glsl_complex(0, 0);
	uvec3 dimension = nbl_glsl_ext_FFT_Parameters_t_getDimensions();
	uint index = coordinate.y * dimension.x + coordinate.x;
//	uint index = channel * (dimension.x * dimension.y * dimension.z) + coordinate.z * (dimension.x * dimension.y) + coordinate.y * (dimension.x) + coordinate.x;
	retValue = ifft_x_in.data[index];
	return retValue;
}

void nbl_glsl_ext_FFT_setData(in uvec3 coordinate, in uint channel, in nbl_glsl_complex complex_value)
{
	uvec3 dimension = nbl_glsl_ext_FFT_Parameters_t_getPaddedDimensions();
	imageStore(heightmap, ivec2(coordinate.xy), vec4(complex_value.x, 0, 0, 1));
}

nbl_glsl_complex nbl_glsl_ext_FFT_getPaddedData(in uvec3 coordinate, in uint channel) {
	return nbl_glsl_ext_FFT_getData(coordinate, channel);
}
