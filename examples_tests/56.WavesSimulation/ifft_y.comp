#define _NBL_GLSL_WORKGROUP_SIZE_ 256
layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_, local_size_y=1, local_size_z=1) in;

#define _NBL_GLSL_EXT_FFT_MAX_CHANNELS 3
#define _NBL_GLSL_EXT_FFT_GET_PARAMETERS_DEFINED_
#define _NBL_GLSL_EXT_FFT_GET_DATA_DEFINED_
#define _NBL_GLSL_EXT_FFT_SET_DATA_DEFINED_
#define _NBL_GLSL_EXT_FFT_GET_PADDED_DATA_DEFINED_
#include "nbl/builtin/glsl/ext/FFT/fft.glsl"
#include "waves_common.glsl"


layout(set = 0, binding = 0, std430) buffer IFFT_X_IN
{
	mat3x2 data[];
} ifft_x_in;

layout(set = 0, binding = 1, rgba16f) uniform image2D heightmap;

layout(push_constant) uniform PUSH_CONSTANTS
{
	nbl_glsl_ext_FFT_Parameters_t params;
	float choppiness;
} u_pc;

void main()
{
	for(uint channel = 0; channel < 3; channel++)
		nbl_glsl_ext_FFT(true, channel);
}

nbl_glsl_ext_FFT_Parameters_t nbl_glsl_ext_FFT_getParameters() {
	 nbl_glsl_ext_FFT_Parameters_t ret;
	 ret = u_pc.params;
	 return ret;
}

nbl_glsl_complex nbl_glsl_ext_FFT_getData(in uvec3 coordinate, in uint channel)
{
	uvec3 dimension = nbl_glsl_ext_FFT_Parameters_t_getDimensions();
	uint index = coordinate.y * dimension.x + coordinate.x;
	return ifft_x_in.data[index][channel];
}

void nbl_glsl_ext_FFT_setData(in uvec3 coordinate, in uint channel, in nbl_glsl_complex complex_value)
{
	 vec3 pixel_data = imageLoad(heightmap, ivec2(coordinate.xy)).rgb;
	 pixel_data[channel] = length(complex_value);
	 if(channel != 2) pixel_data[channel] *= u_pc.choppiness;;
	 imageStore(heightmap, ivec2(coordinate.xy), vec4(pixel_data, 1));
}

nbl_glsl_complex nbl_glsl_ext_FFT_getPaddedData(in ivec3 coordinate, in uint channel) {
	return nbl_glsl_ext_FFT_getData(coordinate, channel);
}
