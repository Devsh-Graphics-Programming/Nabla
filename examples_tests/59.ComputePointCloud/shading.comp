// Copyright (C) 2018-2020 - DevSH Graphics Programming Sp. z O.O.
// This file is part of the "Nabla Engine".
// For conditions of distribution and use, see copyright notice in nabla.h

#include "common.h"

layout (push_constant) uniform pushConstants
{
	ShadingPushConstants c;
} u_pushConstants;

#ifdef Z_PREPASS
layout (set = 0, binding = 0, r32ui) uniform readonly uimage2D visbuffer;
#else
layout (set = 0, binding = 0, rg32ui) uniform readonly uimage2D visbuffer;
#endif

struct WorldPosition {
	float x, y, z;
};

layout (set = 0, binding = 1, std430) readonly buffer pointCloud {
	WorldPosition position[];
} u_pointCloud;

layout (set = 0, binding = 2, rgba8) uniform writeonly image2D outImage;
layout (set = 0, binding = 3, r32ui) uniform readonly uimage2D depthBuffer;

void main()
{
	uvec2 coords = gl_GlobalInvocationID.xy;
	if (!all(lessThan(coords, u_pushConstants.c.imgSize)))
	{
		return;
	}
	ivec2 coordsi = ivec2(coords);

	uvec4 vis = imageLoad(visbuffer, coordsi);
	#ifdef Z_PREPASS
	float depth = uintBitsToFloat(imageLoad(depthBuffer, coordsi).x);
	uint pointId = vis.x;
	#else
	float depth = uintBitsToFloat(vis.x);
	uint pointId = vis.y;
	#endif
	
	// Sky pixel
	if (depth == 0.0) {
		imageStore(outImage, coordsi, vec4(0.0));
	} else {
		imageStore(outImage, coordsi, vec4(mix(vec3(186, 0, 13) / vec3(255), vec3(118, 255, 3) / vec3(255), vec3(depth * 10000.0)), 1.0));
	}
}