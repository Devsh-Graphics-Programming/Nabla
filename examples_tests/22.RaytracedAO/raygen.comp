#version 430 core
#extension GL_EXT_shader_16bit_storage : require

#include "raytraceCommon.h"
layout(local_size_x = WORKGROUP_DIM, local_size_y = WORKGROUP_DIM) in;

#include "raytraceCommon.glsl"

layout(set = 3, binding = 0) uniform usampler2D frontFacingTriangleIDDrawID_unorm16Bary_dBarydScreenHalf2x2; // should it be called backfacing or frontfacing?

bool get_sample_job()
{
	return all(lessThan(gl_GlobalInvocationID.xy,staticViewData.imageDimensions));
}

vec3 unpack_barycentrics(in uint data)
{
	const vec2 firstTwo = unpackUnorm2x16(data);
	return vec3(firstTwo.x,firstTwo.y,1.f-firstTwo.x-firstTwo.y);
}

void main()
{
	clear_raycount();
	bool hit = false;
	if (get_sample_job())
	{
		vec3 emissive = staticViewData.envmapBaseColor;
		
		// vis buffer read
		const uvec2 outPixelLocation = gl_GlobalInvocationID.xy;
		const uvec4 visBuffer = texelFetch(frontFacingTriangleIDDrawID_unorm16Bary_dBarydScreenHalf2x2,ivec2(outPixelLocation),0);

		hit = visBuffer[0]!=0xffffffffu;
		if (hit)
		{
			// vis buffer decode
			const bool frontfacing = !bool(visBuffer[0]&0x80000000u);
			const int triangleIDBitcount = findMSB(MAX_TRIANGLES_IN_BATCH-1)+1;
			/*const uint */ triangleID = bitfieldExtract(visBuffer[0],31-triangleIDBitcount,triangleIDBitcount);
			/*const uint */ batchInstanceGUID = bitfieldExtract(visBuffer[0],0,31-triangleIDBitcount);
			const vec2 compactBary = unpackUnorm2x16(visBuffer[1]);
			
			//
			const nbl_glsl_ext_Mitsuba_Loader_instance_data_t batchInstanceData = InstData.data[batchInstanceGUID];
			const uvec3 indices = get_triangle_indices(batchInstanceData,triangleID);
			
			// get material while waiting for indices
			const nbl_glsl_MC_oriented_material_t material = nbl_glsl_MC_material_data_t_getOriented(batchInstanceData.material,frontfacing);
			// get barycentric derivatives while waiting for the material
			#ifdef TEX_PREFETCH_STREAM
			// TODO: separate pipeline and separate out the barycentric derivative FBO attachment, only write if need to, only fetch if `needs_texture_prefetch`
			const mat2 dBarydScreen = mat2(unpackHalf2x16(visBuffer[2]),unpackHalf2x16(visBuffer[3]));
			#endif
			emissive = nbl_glsl_MC_oriented_material_t_getEmissive(material);
			
			const uint vertex_depth_mod_2 = 0x1u;
			// load vertex data
			vec3 geomDenormal;
			mat3 transformedPositions;
			const vec3 lastVxPos = load_positions(transformedPositions,geomDenormal,batchInstanceData,indices);
			const nbl_glsl_xoroshiro64star_state_t scramble_start_state = load_aux_vertex_attrs(
				batchInstanceData,indices,compactBary,geomDenormal,
				material,outPixelLocation,vertex_depth_mod_2
#ifdef TEX_PREFETCH_STREAM
				,dBarydScreen
#endif
			);
			
			const float quantizationError = nbl_glsl_numeric_limits_float_epsilon(1u);
			const mat3 transormedPositions_error = mat3(
				(quantizationError + nbl_glsl_ieee754_gamma(3u)) * abs(transformedPositions[0]),
				(quantizationError + nbl_glsl_ieee754_gamma(3u)) * abs(transformedPositions[1]),
				(quantizationError + nbl_glsl_ieee754_gamma(3u)) * abs(transformedPositions[2]));
			
			const vec3 dPdBary0_error = abs(dPdBary[0]) * nbl_glsl_ieee754_gamma(1u) + transormedPositions_error[0] + transormedPositions_error[2];
			const vec3 dPdBary1_error = abs(dPdBary[1]) * nbl_glsl_ieee754_gamma(1u) + transormedPositions_error[1] + transormedPositions_error[2];

			const float compactBary_error = exp2(-16.f); // UNORM16 being used for storage
			const vec3 lastVtxPos_error = transormedPositions_error[2] + nbl_glsl_ieee754_gamma(1u) * abs(lastVxPos);

			const vec3 local_origin = dPdBary * compactBary;
			const vec3 localOrigin_error = abs(local_origin) * nbl_glsl_ieee754_gamma(2u) 
												+ compactBary_error * abs(dPdBary[0]) + abs(compactBary.x) * dPdBary0_error
												+ compactBary_error * abs(dPdBary[1]) + abs(compactBary.y) * dPdBary1_error;

			const vec3 origin = local_origin + lastVxPos;
			vec3 origin_error = nbl_glsl_ieee754_gamma(1u) * abs(origin) + localOrigin_error + lastVtxPos_error;
			
			normalizedV = normalize(pc.cummon.camPos-origin);

			// generate rays
			const uint vertex_depth = 1u;
			generate_next_rays(
				staticViewData.samplesPerPixelPerDispatch,material,frontfacing,vertex_depth,
				scramble_start_state,pc.cummon.samplesComputed,outPixelLocation,origin,origin_error,vec3(1.0)
			);

			emissive = vec3(0.f);
		}

		vec3 acc;
		uvec3 accumulationLocation = uvec3(outPixelLocation,0u);
		const bool firstFrame = pc.cummon.rcpFramesDispatched==1.f;
		if (record_emission_common(acc,accumulationLocation,emissive*float(staticViewData.samplesPerPixelPerDispatch),true) || firstFrame)
			storeAccumulation(acc,accumulationLocation);
		
		if (firstFrame) // clear accumulation totally if beginning a new frame
		for (uint i=1u; i<staticViewData.samplesPerPixelPerDispatch; i++)
			imageStore(accumulation,ivec3(outPixelLocation,i),uvec4(0u));
	}
}