#version 430 core
#extension GL_EXT_shader_16bit_storage : require

#include "raytraceCommon.h"
layout(local_size_x = WORKGROUP_SIZE) in;

// TODO : NEE
#define MAX_RAYS_GENERATED 1
#include "raytraceCommon.glsl"

uint get_path_vertex_depth()
{
	return pc.cummon.depth;
}

#include <nbl/builtin/glsl/ext/RadeonRays/intersection.glsl>
layout(set = 3, binding = 0, std430) restrict readonly buffer SourceRays
{
	nbl_glsl_ext_RadeonRays_ray sourceRays[];
};
layout(set = 3, binding = 1, std430) restrict buffer Queries
{
	nbl_glsl_ext_RadeonRays_Intersection intersections[];
};


bool get_sample_job()
{
	return gl_GlobalInvocationID.x<rayCount[(pc.cummon.rayCountWriteIx-1u)&uint(RAYCOUNT_N_BUFFERING_MASK)];
}

void main()
{
	clear_raycount();
	if (get_sample_job())
	{
		// basic reads
		const uint vertex_depth = get_path_vertex_depth();
		const nbl_glsl_ext_RadeonRays_Intersection intersection = intersections[gl_GlobalInvocationID.x];
		const nbl_glsl_ext_RadeonRays_ray ray = sourceRays[gl_GlobalInvocationID.x];

		const uint batchInstanceGUID = intersection.shapeid;
		const uint invalidID = 0xffffffffu;
		const bool hit = batchInstanceGUID!=invalidID;
		
		// obtain ray incoming direction
		normalizedV = -ray.direction;

		//
		uvec2 outPixelLocation;
		float aovThroughputScale;
		unpackOutPixelLocationAndAoVThroughputFactor(ray.time,outPixelLocation,aovThroughputScale);
		const vec3 throughput = vec3(
			unpackHalf2x16(ray.useless_padding[0]).rg,
			unpackHalf2x16(ray.useless_padding[1])[0]
		);
		const uint sampleID = bitfieldExtract(ray.useless_padding[1],16,16);

		//
		Contribution contrib;
		if (hit)
		{
			const uint triangleID = intersection.primid;
			const nbl_glsl_ext_Mitsuba_Loader_instance_data_t batchInstanceData = InstData.data[batchInstanceGUID];
			
			// clear the hit success flag
			intersections[gl_GlobalInvocationID.x].shapeid = -1;

			const uvec3 indices = get_triangle_indices(batchInstanceData,triangleID);
			
			// positions
			vec3 geomNormal;
			const vec3 lastVxPos = load_positions(geomNormal,batchInstanceData,indices);

			const bool frontfacing = bool((batchInstanceData.determinantSignBit^floatBitsToUint(dot(normalizedV,geomNormal)))&0x80000000u);

			// get material
			const nbl_glsl_MC_oriented_material_t material = nbl_glsl_MC_material_data_t_getOriented(batchInstanceData.material,frontfacing);
			contrib.color = contrib.albedo = nbl_glsl_MC_oriented_material_t_getEmissive(material);
	
			const uint pathDepth = bitfieldExtract(staticViewData.pathDepth_noRussianRouletteDepth_samplesPerPixelPerDispatch,0,8);
			const bool _continue = vertex_depth!=pathDepth && material.genchoice_count!=0u && ray.maxT==nbl_glsl_FLT_MAX; // not last vertex and has a BxDF and not NEE path
			if (_continue)
			{
				// if we ever support spatially varying emissive, we'll need to hoist barycentric computation and UV fetching to the position fetching
				const vec2 compactBary = vec2(1.f-intersection.uv.x-intersection.uv.y,intersection.uv.x); // radeon rays is a special boy and does its barycentrics weird
				
				//
				const nbl_glsl_xoroshiro64star_state_t scramble_start_state = nbl_glsl_xoroshiro64star_state_t(ray.mask,ray._active);
				
				//
				normalizedN = load_normal_and_prefetch_textures(
					batchInstanceData,indices,compactBary,geomNormal,material
#ifdef TEX_PREFETCH_STREAM
					,mat2(0.0) // TODO: Covariance Rendering
#endif
				);
				
				const vec3 origin = dPdBary*compactBary+lastVxPos;
				generate_next_rays(
					MAX_RAYS_GENERATED,material,frontfacing,vertex_depth,
					scramble_start_state,sampleID,outPixelLocation,origin,
					throughput,aovThroughputScale,contrib.albedo,contrib.worldspaceNormal
				);
			}
			else
				contrib.worldspaceNormal = geomNormal*nbl_glsl_MC_colorToScalar(contrib.albedo);
		}
		else
			Contribution_initMiss(contrib,aovThroughputScale);
			
		Contribution_normalizeAoV(contrib);
		
		const uint samplesPerPixelPerDispatch = bitfieldExtract(staticViewData.pathDepth_noRussianRouletteDepth_samplesPerPixelPerDispatch,16,16);
		const uvec3 accumulationLocation = uvec3(outPixelLocation,sampleID%samplesPerPixelPerDispatch);
		const vec3 acc_emissive = fetchAccumulation(accumulationLocation);
		const vec3 acc_albedo = fetchAlbedo(accumulationLocation);
		const vec3 acc_worldspaceNormal = fetchWorldspaceNormal(accumulationLocation);
		// TODO: finish MIS
		storeAccumulation(acc_emissive,contrib.color*throughput,accumulationLocation);
		const vec3 aovThroughput = throughput*aovThroughputScale;
		storeAlbedo(acc_albedo,contrib.albedo*aovThroughput,accumulationLocation);
		storeWorldspaceNormal(acc_worldspaceNormal,contrib.worldspaceNormal*nbl_glsl_MC_colorToScalar(aovThroughput),accumulationLocation);
	}
}