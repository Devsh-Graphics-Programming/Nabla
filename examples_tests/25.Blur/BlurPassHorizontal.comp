#version 430 core

// For a 1024x1024 image
// WG_SIZE = 256x1x1
// VT = 4
// Number of workgroups = 1024

#define _NBL_GLSL_WORKGROUP_SIZE_ 256

// Todo: DRY!!
#define COUNT 1024
#define RADIUS 15.73f

// This would probably be a push constant
#define VT 4

layout (local_size_x = _NBL_GLSL_WORKGROUP_SIZE_)in;

layout (set = 0, binding = 0) uniform sampler2D in_image;
layout (set = 0, binding = 1, rgba16f) writeonly uniform image2D out_image;

#include <nbl/builtin/glsl/workgroup/shared_arithmetic.glsl>

#ifdef _NBL_GLSL_EXT_BLUR_SHARED_SIZE_NEEDED_
	#if NBL_GLSL_EVAL(_NBL_GLSL_SCRATCH_SHARED_SIZE_DEFINED_) < NBL_GLSL_EVAL(_NBL_GLSL_EXT_BLUR_SHARED_SIZE_NEEDED_)
		#error "Not enough shared memory declared"
	#endif
#else
	#if COUNT < _NBL_GLSL_WORKGROUP_ARITHMETIC_SHARED_SIZE_NEEDED_
		#define _NBL_GLSL_EXT_BLUR_SHARED_SIZE_NEEDED_ _NBL_GLSL_WORKGROUP_ARITHMETIC_SHARED_SIZE_NEEDED_
	#else
		#define _NBL_GLSL_EXT_BLUR_SHARED_SIZE_NEEDED_ COUNT
	#endif

    #define _NBL_GLSL_SCRATCH_SHARED_DEFINED_ nbl_glsl_ext_Blur_scratchShared
    #define _NBL_GLSL_SCRATCH_SHARED_SIZE_DEFINED_ _NBL_GLSL_EXT_BLUR_SHARED_SIZE_NEEDED_
	shared uint _NBL_GLSL_SCRATCH_SHARED_DEFINED_[_NBL_GLSL_SCRATCH_SHARED_SIZE_DEFINED_];
#endif

// Todo: Need to test and tighten this whole spillage calculation up
#define _NBL_GLSL_EXT_BLUR_IMPL_LOCAL_SPILLAGE_ ((_NBL_GLSL_WORKGROUP_ARITHMETIC_SHARED_SIZE_NEEDED_-1)/_NBL_GLSL_WORKGROUP_SIZE_+1)

#if _NBL_GLSL_EXT_BLUR_IMPL_LOCAL_SPILLAGE_ > VT
	#define _NBL_GLSL_EXT_BLUR_LOCAL_SPILLAGE_ VT
#elif _NBL_GLSL_EXT_BLUR_IMPL_LOCAL_SPILLAGE_ < (VT/4)
	#define _NBL_GLSL_EXT_BLUR_LOCAL_SPILLAGE_ (VT/4)
#else
	#define _NBL_GLSL_EXT_BLUR_LOCAL_SPILLAGE_ _NBL_GLSL_EXT_BLUR_IMPL_LOCAL_SPILLAGE_
#endif

#include <nbl/builtin/glsl/workgroup/arithmetic.glsl>
#include <nbl/builtin/glsl/workgroup/ballot.glsl>

// Convenience thing
#define scratch_shared _NBL_GLSL_SCRATCH_SHARED_DEFINED_

// Note: This function depends on `scratch_shared` to be properly initialized with inclusive prefix sums
// Todo(achal): You can't have it depend on `scratch_shared` --das not gud
float getInterpolatedPrefixSums(float idx)
{
	uint floored = uint(floor(idx));
	return mix(uintBitsToFloat(scratch_shared[floored]), uintBitsToFloat(scratch_shared[floored + 1u]), fract(idx));
}

vec3 getPaddedData(in uint i)
{
	uint idx = (i * _NBL_GLSL_WORKGROUP_SIZE_) + gl_LocalInvocationIndex; // this is the x coordinate

	vec4 data = vec4(0.f);
	if (idx < COUNT && gl_WorkGroupID.x < COUNT)
	{
		vec2 tex_coords = vec2(float(idx)/float(COUNT), float(gl_WorkGroupID.x)/float(COUNT));
		data = texture(in_image, tex_coords);
	}

	return data.rgb;
}

void main()
{
	const uint channel_count = 3u;
	const uint pass_count = 3u;

	vec3 blurred[VT];
	for (uint i = 0u; i < VT; ++i)
		blurred[i] = getPaddedData(i);

	for (uint ch = 0; ch < channel_count; ++ch)
	{
		for (uint pass = 0; pass < pass_count; ++pass)
		{
			float previous_block_sum = 0.f;
	
			float spill[_NBL_GLSL_EXT_BLUR_LOCAL_SPILLAGE_];
			for (uint i = 0u; i < _NBL_GLSL_EXT_BLUR_LOCAL_SPILLAGE_; ++i)
			{
			    spill[i] = nbl_glsl_workgroupInclusiveAdd(blurred[i][ch]) + previous_block_sum;
			    previous_block_sum = nbl_glsl_workgroupBroadcast(spill[i], _NBL_GLSL_WORKGROUP_SIZE_ - 1u);
			}
	
			for (uint i = _NBL_GLSL_EXT_BLUR_LOCAL_SPILLAGE_; i < VT; ++i)
			{
			    float scan_result = nbl_glsl_workgroupInclusiveAdd(blurred[i][ch]) + previous_block_sum;
			    previous_block_sum = nbl_glsl_workgroupBroadcast(scan_result,  _NBL_GLSL_WORKGROUP_SIZE_ - 1u);
	
				uint idx = (i * _NBL_GLSL_WORKGROUP_SIZE_) + gl_LocalInvocationIndex;
			    scratch_shared[idx] = floatBitsToUint(scan_result);
			}
	
			for (uint i = 0u; i < _NBL_GLSL_EXT_BLUR_LOCAL_SPILLAGE_; ++i)
			    scratch_shared[(i * _NBL_GLSL_WORKGROUP_SIZE_) + gl_LocalInvocationIndex] = floatBitsToUint(spill[i]);
			barrier();
			
			for (uint i = 0; i < VT; ++i)
			{
				uint idx = (i * _NBL_GLSL_WORKGROUP_SIZE_) + gl_LocalInvocationIndex;
				if (idx < COUNT)
				{
					float left = float(idx) - RADIUS - 1.f;
					float right = float(idx) + RADIUS;
	
					const uint last = COUNT - 1u;
	
					float result;
					if (right > last)
						result = (right - float(last)) * (uintBitsToFloat(scratch_shared[last]) - uintBitsToFloat(scratch_shared[last - 1u])) + uintBitsToFloat(scratch_shared[last]);
					else
						result = getInterpolatedPrefixSums(right);
	
					if (left < 0)
						result -= (1.f - abs(left)) * uintBitsToFloat(scratch_shared[0u]);
					else
						result -= getInterpolatedPrefixSums(left);
	
					blurred[i][ch] = result/(2.f*RADIUS + 1.f);
				}
			}
		}
	}

	for (uint i = 0; i < VT; ++i)
	{
		uint idx = (i * _NBL_GLSL_WORKGROUP_SIZE_) + gl_LocalInvocationIndex;
		if (idx < COUNT && gl_WorkGroupID.x < COUNT)
			imageStore(out_image, ivec2(idx, gl_WorkGroupID.x), vec4(blurred[i], 1.f));
	}
}
























