#include "nbl/builtin/glsl/ext/CentralLimitBoxBlur/parameters.glsl"

#define _NBL_GLSL_EXT_BLUR_INPUT_SET_DEFINED_ 0
#define _NBL_GLSL_EXT_BLUR_INPUT_BINDING_DEFINED_ 0

layout (set = _NBL_GLSL_EXT_BLUR_INPUT_SET_DEFINED_, binding = _NBL_GLSL_EXT_BLUR_INPUT_BINDING_DEFINED_) uniform sampler2D in_image;
#define _NBL_GLSL_EXT_BLUR_INPUT_DESCRIPTOR_DEFINED_

vec4 downscale(in vec2 tex_coords)
{
	return (texture(in_image, tex_coords) + textureOffset(in_image, tex_coords, ivec2(1, 0)) + textureOffset(in_image, tex_coords, ivec2(0, 1))
			+ textureOffset(in_image, tex_coords, ivec2(1, 1))) / 4.f;
}

vec4 nbl_glsl_ext_Blur_getPaddedData(in uvec2 coordinate)
{
	const uvec2 image_dims = uvec2(nbl_glsl_ext_Blur_Parameters_t_getWidth(), nbl_glsl_ext_Blur_Parameters_t_getHeight());

	vec4 data = vec4(0.f);
	if (all(lessThan(coordinate, image_dims)))
	{
		vec2 tex_coords = vec2(coordinate) / vec2(image_dims);
		data = downscale(tex_coords);
	}

	return data;
}
#define _NBL_GLSL_EXT_BLUR_GET_PADDED_DATA_DEFINED_

#include "nbl/builtin/glsl/ext/CentralLimitBoxBlur/default_compute_blur.comp"