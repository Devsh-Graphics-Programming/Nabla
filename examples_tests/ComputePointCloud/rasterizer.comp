// Copyright (C) 2018-2020 - DevSH Graphics Programming Sp. z O.O.
// This file is part of the "Nabla Engine".
// For conditions of distribution and use, see copyright notice in nabla.h

#version 450

#pragma shader_stage(compute)

layout (local_size_x = 16, local_size_y = 16) in;

layout (push_constant) uniform pushConstants
{
	uvec2 imgSize;
	uint pointCount;
} u_pushConstants;

layout (set = 0, binding = 0, rgba8) uniform coherent image2D outImage;
layout (set = 0, binding = 1, std430) readonly buffer PointCloud {
	vec3 position;
} u_pointCloud;

void main()
{
	const uint halfWidth = u_pushConstants.imgSize.x/2;
	if (all(lessThan(gl_GlobalInvocationID.xy, u_pushConstants.imgSize)))
	{
		const vec3 inColor = vec3(0.0);
		vec4 outColor = vec4(inColor, 1.f);
		if (gl_GlobalInvocationID.x < halfWidth)
		{
			float grayscale = 0.2126 * inColor.r + 0.7152 * inColor.g + 0.0722 * inColor.b;
			outColor = vec4(vec3(grayscale), 1.f);
		}
		
		imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), outColor);
	}
}