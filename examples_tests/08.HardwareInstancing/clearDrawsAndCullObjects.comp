#version 430 core

#include "common.glsl"
layout(local_size_x = _NBL_GLSL_WORKGROUP_SIZE_) in;

shared uint scratch[_NBL_GLSL_WORKGROUP_SIZE_];
#define _NBL_GLSL_SCRATCH_SHARED_DEFINED_ scratch
#define _NBL_GLSL_SCRATCH_SHARED_SIZE_DEFINED_ _NBL_GLSL_WORKGROUP_SIZE_
#include "shaderCommon.glsl"


// TODO: figure out the descirptor set assignment of the resources
layout(set = 0, binding = 0, std430, row_major) restrict readonly buffer Objects
{
    SceneNode_t objects[];
};
layout(set = 0, binding = 1, std430) restrict readonly buffer Meshes
{
    Mesh_t meshes[];
};
layout(set = 0, binding = 2, std430) restrict readonly buffer MeshBuffers
{
    MeshBuffer_t meshes[];
};

layout(set = 1, binding = 0, std430) restrict coherent buffer IndirectDispatches
{
    nbl_glsl_DispatchIndirectCommand_t histogramDispatch;
    nbl_glsl_DispatchIndirectCommand_t expandDispatch;
    uint visibleMeshesCount;
};
layout(set = 1, binding = 1, std430, row_major) restrict writeonly buffer VisibleMeshes
{
    VisibleMesh_t visibleMeshes[];
};
layout(set = 1, binding = 2, std430) restrict writeonly buffer VisibleMeshBuffersHistogram
{
    uint visibleMeshBuffersHistogram[];
};

layout(set = 2, binding = 0, std140, row_major) uniform Cameras
{
    // NOTE: could be an unsized array and we could use `gl_GlobalInvocationID.y` to index cameras (or subdivide the X dimension of a workgroup), but then should probably allow separate object indices per camera
    Camera_t camera;
};
layout(set = 2, binding = 1, std430) restrict readonly buffer ObjectIndexBuffer
{
    uint objectUUIDs[];
};
layout(set = 2, binding = 2, std430) restrict readonly buffer LoDData
{
    uint meshLoDData[];
};
layout(set = 2, binding = 3, std430) restrict readonly buffer InIndirectCommandBuffer
{
    uint data[];
} inIndirectCommandBuffer;
layout(set = 2, binding = 4, std430) restrict writeonly buffer OutIndirectCommandBuffer
{
    uint data[];
} outIndirectCommandBuffer;


layout(push_constant) uniform PushConstants
{
    uint objectCount;
    uint drawDataArrayDWORDSize;
} pc;




void clearDrawcalls()
{
    uint dword = gl_GlobalInvocationID.x;
    if (dword<pc.drawDataArrayDWORDSize)
        outIndirectCommandBuffer.data[camera.nextFrameMDIDWORDOffset+dword] = inIndirectCommandBuffer.data[camera.sourceMDIDWORDOffset+dword];
}

void cullObjects()
{
    Mesh_t mesh; mesh.meshBuffersCount = 0u;
    mat4 modelViewProjectionMatrix;
    uint objectUUID;

    if (gl_GlobalInvocationID.x<pc.objectCount)
    {
        objectUUID = objectUUIDs[gl_GlobalInvocationID.x]; 
    
        mat4x3 worldMatrix = nbl_builtin_glsl_workaround_AMD_broken_row_major_qualifier(objects[objectUUID].worldTransform);
        
        int lod = objects[objectUUID].LoDLevelCount;
        {
   	        const vec3 toCamera = vec3(camera.posX,camera.posY,camera.posZ)-worldMatrix[3];
    	    const float distanceSq = dot(toCamera,toCamera);
            
            const uint levelsLoD = lod;
            const uint distancesOffset = objects[objectUUID].LoDDistancesSqOffset;
            for (uint i=0; i<lod; i++)
            if (distanceSq<uintBitsToFloat(meshLoDData[distancesOffset+i]))
                lod = i;
        }

        if (lod<levelsLoD)
        {
            mesh = meshes[meshLoDData[objects[objectUUID].LoDMeshesOffset+lod]];

            modelViewProjectionMatrix = nbl_glsl_pseudoMul4x4with4x3(camera.viewProjMatrix,worldMatrix);

            mat2x3 bbox;
            {
                bbox[0] = mesh.MinEdge;
                bbox[1] = mesh.MaxEdge;
            }
            // Somewhere around here we could add occlusion culling (if we had camera Z-Buffer)
            if (!nbl_glsl_couldBeVisible(modelViewProjectionMatrix,bbox))
                mesh.meshBuffersCount = 0u;
        }
    }

    const uint partialMeshBufferHistogram = nbl_glsl_workgroupInclusiveAdd(mesh.meshBuffersCount);
    barrier();
    memoryBarrierShared();

    // a boolean inclusive prefix sum to figure out where to store visible object
    nbl_glsl_workgroupBallot(mesh.meshBuffersCount!=0u);
    const uint localOffsetPlus1 = nbl_glsl_workgroupBallotInclusiveBitCount();
    {
        if (gl_LocalInvocationIndex==_NBL_GLSL_WORKGROUP_SIZE_-1u)
            scratch[0u] = atomicAdd(visibleMeshesCount,localOffsetPlus1);
        barrier();
        memoryBarrierShared();
    }
    const uint outputIndex = scratch[0u]+localOffsetPlus1-1u;

    if (mesh.meshBuffersCount!=0u)
    {
		mat3 worldNormalMatrix = inverse(mat3(
            objects[objectUUID].worldNormalMatrixRow0,
            objects[objectUUID].worldNormalMatrixRow1,
            objects[objectUUID].worldNormalMatrixRow2
        ));
		mat3 normalMatrixT = mat3(camera.viewMatrixInverseRow0,camera.viewMatrixInverseRow1,camera.viewMatrixInverseRow2)*worldNormalMatrix;

		visibleMeshes[outputIndex].modelViewProjectionMatrix = modelViewProjectionMatrix;
		visibleMeshes[outputIndex].normalMatrixCol0 = normalMatrixT[0];
		visibleMeshes[outputIndex].cameraUUID = 0u; // we only support one camera/viewpoint for this demo
		visibleMeshes[outputIndex].normalMatrixCol1 = normalMatrixT[1];
		visibleMeshes[outputIndex].objectUUID = objectUUID;
		visibleMeshes[outputIndex].normalMatrixCol2 = normalMatrixT[2];
		visibleMeshes[outputIndex].meshBuffersOffset = mesh.meshBuffersOffset;

        visibleMeshBuffersHistogram[outputIndex] = partialMeshBufferHistogram;
	}
    // set up indirect dispatches
    if (gl_LocalInvocationIndex==_NBL_GLSL_WORKGROUP_SIZE_-1u)
    {
        const uint roundedUpLevel2Groups = outputIndex/_NBL_GLSL_WORKGROUP_SIZE_+1u;
        atomicMax(histogramDispatch.num_groups_x,roundedUpLevel2Groups);
    }
}

void main()
{
    clearDrawcalls();
    cullObjects();
}


/**
We know what objects we want to draw with which mesh and for what camera.
Per-camera MDIs have been cleared, and a partial histogram of meshbuffers (in _NBL_GLSL_WORKGROUP_SIZE_ chunks) has been built

visibleMeshes now contains an implicit **scrambled** list of meshbuffer to draw.


in the end they need to be expanded to MeshBuffers sorted by Camera, Pipeline and then Instance (although instance needs not be sorted)
its pointless to sort before expansion, because we can only sort by camera as pipelines are unknown
**/