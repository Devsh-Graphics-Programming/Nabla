#version 430 core

#include "common.glsl"
layout(local_size_x = _NBL_GLSL_WORKGROUP_SIZE_) in;

#define _NBL_GLSL_SCRATCH_SHARED_SIZE_DEFINED_ (_NBL_GLSL_WORKGROUP_SIZE_<<1u)
shared uint histogram[_NBL_GLSL_SCRATCH_SHARED_SIZE_DEFINED_];
#define _NBL_GLSL_SCRATCH_SHARED_DEFINED_ histogram
#include "shaderCommon.glsl"


layout(set = 2, binding = 0, std430) restrict readonly buffer scrambledVisibleMeshRedirects
{
    InstanceVisibleMeshRedirect_t scrambledVisibleMeshRedirects[];
};
layout(set = 2, binding = 1, std430) restrict writeonly buffer VisibleMeshRedirects
{
    uint visibleMeshRedirects[];
};

// in a real scenegraph managment compute shader, this will need multiple dispatches to calculate
void computeHistogram()
{
    uint instanceCount = 0u;
    if (gl_LocalInvocationIndex<pc.maxDrawCount)
        instanceCount = indirectDraws[gl_LocalInvocationIndex].instanceCount;
    const uint instancePrefixSum = nbl_glsl_workgroupExclusiveAdd(instanceCount);
    barrier();
    memoryBarrierShared();
    histogram[gl_LocalInvocationIndex] = instancePrefixSum;
    barrier();
    memoryBarrierShared();
    indirectDraws[gl_LocalInvocationIndex].baseInstance = instancePrefixSum;
}

void main()
{
    computeHistogram();

    const uint foundIx = upper_bound<histogram>(gl_GlobalInvocationID.x);
    if (foundIx<pc.maxDrawCount)
    {  
        InstanceVisibleMeshRedirect_t redirect = scrambledVisibleMeshRedirects[gl_GlobalInvocationID.x];
        visibleMeshRedirects[histogram[foundIx]+redirect.instanceID] = redirect.visibleMeshID;
    }
}