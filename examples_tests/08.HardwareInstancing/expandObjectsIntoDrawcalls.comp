#version 430 core

#include "common.glsl"
layout(local_size_x = _NBL_GLSL_WORKGROUP_SIZE_) in;

shared uint scratch[_NBL_GLSL_WORKGROUP_SIZE_];
#define _NBL_GLSL_SCRATCH_SHARED_DEFINED_ scratch
#define _NBL_GLSL_SCRATCH_SHARED_SIZE_DEFINED_ _NBL_GLSL_WORKGROUP_SIZE_
#include "shaderCommon.glsl"


layout(set = 1, binding = 0, std430) restrict readonly buffer IndirectDispatches
{
    nbl_glsl_DispatchIndirectCommand_t histogramDispatch; // not used
    nbl_glsl_DispatchIndirectCommand_t expandDispatch; // not used
    uint visibleMeshesCount;
    uint visibleInstancesCount;
};
layout(set = 1, binding = 1, std430, row_major) restrict readonly buffer VisibleMeshes
{
    VisibleMesh_t visibleMeshes[];
};
layout(set = 1, binding = 2, std430) restrict readonly buffer VisibleMeshBuffersHistogramLevel1
{
    uint visibleMeshBuffersHistogramLevel1[];
};
layout(set = 1, binding = 3, std430) restrict writeonly buffer VisibleMeshBuffersHistogramLevel2
{
    uint visibleMeshBuffersHistogramLevel2[];
};


uint searchMeshBufferLevel3(uint meshBufferIndex, out uint level2Block)
{
    const uint workgroupSizeSquared = _NBL_GLSL_WORKGROUP_SIZE_*_NBL_GLSL_WORKGROUP_SIZE_;
    const uint roundedUpLevel3Groups = (visibleMeshesCount-1u)/workgroupSizeSquared+1u;
    const bool needsLevel3Scan = gl_LocalInvocationIndex<roundedUpLevel3Groups;

    const uint lowIndex = min((gl_LocalInvocationIndex+1u)*_NBL_GLSL_WORKGROUP_SIZE_-1u,(visibleMeshesCount-1u)/_NBL_GLSL_WORKGROUP_SIZE_);
    uint level2Histogram = 0u;
    if (needsLevel3Scan)
        level2Histogram = visibleMeshBuffersHistogramLevel2[lowIndex];

    const uint level3Histogram = nbl_glsl_workgroupExclusiveAdd(level2Histogram);
    barrier();
    memoryBarrierShared();
    scratch[gl_LocalInvocationIndex] = level3Histogram;
    barrier();
    memoryBarrierShared();

    level2Block = upper_bound<scratch>(0u,_NBL_GLSL_WORKGROUP_SIZE_,meshBufferIndex);
    if (level2Block!=0u)
        meshBufferIndex -= scratch[level2Block-1u];
    return meshBufferIndex;
}

void mapInvocationToMeshBuffer(in uint invocationIndex, out uint meshIndex, out uint meshBufferIndex)
{
    uint level2Block;
    const uint meshBufferIndexLevel2 = searchMeshBufferLevel3(min(invocationIndex,visibleObjectCount-1u),level2Block);

    // search in level 2
    uint meshBufferIndexLevel1 = meshBufferIndexLevel2;
    {
        const uint begin = level2Block*_NBL_GLSL_WORKGROUP_SIZE_;
        const uint end = min(begin+_NBL_GLSL_WORKGROUP_SIZE_,(visibleMeshesCount-1u)/_NBL_GLSL_WORKGROUP_SIZE_+1u);
        const uint level1Block = upper_bound<visibleMeshBuffersHistogramLevel2>(begin,end,meshBufferIndexLevel2);
        if (level1Block!=0u)
            meshBufferIndexLevel1 -= visibleMeshBuffersHistogramLevel2[level1Block-1u];
    }

    // search in level 1
    meshBufferIndex = meshBufferIndexLevel1;
    {
        const uint begin = level1Block*_NBL_GLSL_WORKGROUP_SIZE_;
        const uint end = min(begin+_NBL_GLSL_WORKGROUP_SIZE_,visibleMeshesCount);
        const uint meshIndex = upper_bound<visibleMeshBuffersHistogramLevel1>(begin,end,meshBufferIndexLevel1);
        if (meshIndex!=0u)
            meshBufferIndex -= visibleMeshBuffersHistogramLevel1[meshIndex-1u];
    }
}
    

void main()
{
    // crucial part of expansion
    uint meshIndex,meshBufferIndex;
    mapInvocationToMeshBuffer(gl_GlobalInvocationID.x,meshIndex,meshBufferIndex);

    //
    const uint meshBufferUUID = visibleMeshes[meshIndex].meshBuffersOffset+meshBufferIndex;

    //
    const uint cameraUUID = visibleMeshes[meshIndex].cameraUUID;
    const uint cameraDrawUUID = lower_bound<camera[cameraUUID].meshBufferUUIDToDrawUUID>(0u,maxDraws,meshBufferUUID);

    //
    const bool visibleInstance = cameraDrawUUID<maxDraws && camera[cameraUUID].meshBufferUUIDToDrawUUID[cameraDrawUUID]==meshBufferUUID;
    barrier();
    memoryBarrierShared();
    nbl_glsl_workgroupBallot(visibleInstance);
    const uint localOffsetPlus1 = nbl_glsl_workgroupBallotInclusiveBitCount();
    {
        if (gl_LocalInvocationIndex==_NBL_GLSL_WORKGROUP_SIZE_-1u)
            scratch[0u] = atomicAdd(visibleInstancesCount,localOffsetPlus1);
        barrier();
        memoryBarrierShared();
    }
    const uint globalInstanceIndex = scratch[0u]+localOffsetPlus1-1u;

    //
    if (visibleInstance)
    {
        const uint drawUUID = camera.nextFrameMDIOffset+cameraDrawUUID;
        const uint instanceID = atomicAdd(indirectDraws[drawUUID].instanceCount,1u);

        scrambledVisibleMeshRedirects[globalInstanceIndex].drawUUID = drawUUID;
        scrambledVisibleMeshRedirects[globalInstanceIndex].instanceID = instanceID;
        scrambledVisibleMeshRedirects[globalInstanceIndex].visibleMeshID = visibleMeshID;
        // task for a separate dispatch
        /**
        now we need to produce a histogram of `instanceCount` in `baseInstance`

        then take the redirects and "radix" sort them

        visibleMeshRedirects[histogram[drawUUID]+instanceID] = visibleMeshUUID;
        **/ 
    }
}
